/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTicketInfoDtoGuestsInner from './EventTicketInfoDtoGuestsInner';
import EventTicketInfoDtoTicketsInner from './EventTicketInfoDtoTicketsInner';
import EventTicketInfoDtoTicketsInnerTicketGiftsInner from './EventTicketInfoDtoTicketsInnerTicketGiftsInner';

/**
 * The EventTicketInfoDto model module.
 * @module model/EventTicketInfoDto
 * @version 1.0
 */
class EventTicketInfoDto {
    /**
     * Constructs a new <code>EventTicketInfoDto</code>.
     * @alias module:model/EventTicketInfoDto
     * @param eventPhoto {String} 
     * @param eventTitle {String} 
     * @param eventDescription {String} 
     * @param eventState {String} 
     * @param eventCity {String} 
     * @param eventAddress {String} 
     * @param eventNumber {String} 
     * @param eventDistrict {String} 
     * @param eventComplement {String} 
     * @param eventLatitude {String} 
     * @param eventLongitude {String} 
     * @param eventStartAt {Object} 
     * @param eventEndAt {Object} 
     * @param tickets {Array.<module:model/EventTicketInfoDtoTicketsInner>} 
     * @param links {Array.<module:model/EventTicketInfoDtoTicketsInnerTicketGiftsInner>} 
     */
    constructor(eventPhoto, eventTitle, eventDescription, eventState, eventCity, eventAddress, eventNumber, eventDistrict, eventComplement, eventLatitude, eventLongitude, eventStartAt, eventEndAt, tickets, links) { 
        
        EventTicketInfoDto.initialize(this, eventPhoto, eventTitle, eventDescription, eventState, eventCity, eventAddress, eventNumber, eventDistrict, eventComplement, eventLatitude, eventLongitude, eventStartAt, eventEndAt, tickets, links);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventPhoto, eventTitle, eventDescription, eventState, eventCity, eventAddress, eventNumber, eventDistrict, eventComplement, eventLatitude, eventLongitude, eventStartAt, eventEndAt, tickets, links) { 
        obj['eventPhoto'] = eventPhoto;
        obj['eventTitle'] = eventTitle;
        obj['eventDescription'] = eventDescription;
        obj['eventState'] = eventState;
        obj['eventCity'] = eventCity;
        obj['eventAddress'] = eventAddress;
        obj['eventNumber'] = eventNumber;
        obj['eventDistrict'] = eventDistrict;
        obj['eventComplement'] = eventComplement;
        obj['eventLatitude'] = eventLatitude;
        obj['eventLongitude'] = eventLongitude;
        obj['eventStartAt'] = eventStartAt;
        obj['eventEndAt'] = eventEndAt;
        obj['tickets'] = tickets;
        obj['links'] = links;
    }

    /**
     * Constructs a <code>EventTicketInfoDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketInfoDto} obj Optional instance to populate.
     * @return {module:model/EventTicketInfoDto} The populated <code>EventTicketInfoDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketInfoDto();

            if (data.hasOwnProperty('eventPhoto')) {
                obj['eventPhoto'] = ApiClient.convertToType(data['eventPhoto'], 'String');
            }
            if (data.hasOwnProperty('eventTitle')) {
                obj['eventTitle'] = ApiClient.convertToType(data['eventTitle'], 'String');
            }
            if (data.hasOwnProperty('eventDescription')) {
                obj['eventDescription'] = ApiClient.convertToType(data['eventDescription'], 'String');
            }
            if (data.hasOwnProperty('eventState')) {
                obj['eventState'] = ApiClient.convertToType(data['eventState'], 'String');
            }
            if (data.hasOwnProperty('eventCity')) {
                obj['eventCity'] = ApiClient.convertToType(data['eventCity'], 'String');
            }
            if (data.hasOwnProperty('eventAddress')) {
                obj['eventAddress'] = ApiClient.convertToType(data['eventAddress'], 'String');
            }
            if (data.hasOwnProperty('eventNumber')) {
                obj['eventNumber'] = ApiClient.convertToType(data['eventNumber'], 'String');
            }
            if (data.hasOwnProperty('eventDistrict')) {
                obj['eventDistrict'] = ApiClient.convertToType(data['eventDistrict'], 'String');
            }
            if (data.hasOwnProperty('eventComplement')) {
                obj['eventComplement'] = ApiClient.convertToType(data['eventComplement'], 'String');
            }
            if (data.hasOwnProperty('eventLatitude')) {
                obj['eventLatitude'] = ApiClient.convertToType(data['eventLatitude'], 'String');
            }
            if (data.hasOwnProperty('eventLongitude')) {
                obj['eventLongitude'] = ApiClient.convertToType(data['eventLongitude'], 'String');
            }
            if (data.hasOwnProperty('eventStartAt')) {
                obj['eventStartAt'] = ApiClient.convertToType(data['eventStartAt'], Object);
            }
            if (data.hasOwnProperty('eventEndAt')) {
                obj['eventEndAt'] = ApiClient.convertToType(data['eventEndAt'], Object);
            }
            if (data.hasOwnProperty('tickets')) {
                obj['tickets'] = ApiClient.convertToType(data['tickets'], [EventTicketInfoDtoTicketsInner]);
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], [EventTicketInfoDtoGuestsInner]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [EventTicketInfoDtoTicketsInnerTicketGiftsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketInfoDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketInfoDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketInfoDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventPhoto'] && !(typeof data['eventPhoto'] === 'string' || data['eventPhoto'] instanceof String)) {
            throw new Error("Expected the field `eventPhoto` to be a primitive type in the JSON string but got " + data['eventPhoto']);
        }
        // ensure the json data is a string
        if (data['eventTitle'] && !(typeof data['eventTitle'] === 'string' || data['eventTitle'] instanceof String)) {
            throw new Error("Expected the field `eventTitle` to be a primitive type in the JSON string but got " + data['eventTitle']);
        }
        // ensure the json data is a string
        if (data['eventDescription'] && !(typeof data['eventDescription'] === 'string' || data['eventDescription'] instanceof String)) {
            throw new Error("Expected the field `eventDescription` to be a primitive type in the JSON string but got " + data['eventDescription']);
        }
        // ensure the json data is a string
        if (data['eventState'] && !(typeof data['eventState'] === 'string' || data['eventState'] instanceof String)) {
            throw new Error("Expected the field `eventState` to be a primitive type in the JSON string but got " + data['eventState']);
        }
        // ensure the json data is a string
        if (data['eventCity'] && !(typeof data['eventCity'] === 'string' || data['eventCity'] instanceof String)) {
            throw new Error("Expected the field `eventCity` to be a primitive type in the JSON string but got " + data['eventCity']);
        }
        // ensure the json data is a string
        if (data['eventAddress'] && !(typeof data['eventAddress'] === 'string' || data['eventAddress'] instanceof String)) {
            throw new Error("Expected the field `eventAddress` to be a primitive type in the JSON string but got " + data['eventAddress']);
        }
        // ensure the json data is a string
        if (data['eventNumber'] && !(typeof data['eventNumber'] === 'string' || data['eventNumber'] instanceof String)) {
            throw new Error("Expected the field `eventNumber` to be a primitive type in the JSON string but got " + data['eventNumber']);
        }
        // ensure the json data is a string
        if (data['eventDistrict'] && !(typeof data['eventDistrict'] === 'string' || data['eventDistrict'] instanceof String)) {
            throw new Error("Expected the field `eventDistrict` to be a primitive type in the JSON string but got " + data['eventDistrict']);
        }
        // ensure the json data is a string
        if (data['eventComplement'] && !(typeof data['eventComplement'] === 'string' || data['eventComplement'] instanceof String)) {
            throw new Error("Expected the field `eventComplement` to be a primitive type in the JSON string but got " + data['eventComplement']);
        }
        // ensure the json data is a string
        if (data['eventLatitude'] && !(typeof data['eventLatitude'] === 'string' || data['eventLatitude'] instanceof String)) {
            throw new Error("Expected the field `eventLatitude` to be a primitive type in the JSON string but got " + data['eventLatitude']);
        }
        // ensure the json data is a string
        if (data['eventLongitude'] && !(typeof data['eventLongitude'] === 'string' || data['eventLongitude'] instanceof String)) {
            throw new Error("Expected the field `eventLongitude` to be a primitive type in the JSON string but got " + data['eventLongitude']);
        }
        if (data['tickets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tickets'])) {
                throw new Error("Expected the field `tickets` to be an array in the JSON data but got " + data['tickets']);
            }
            // validate the optional field `tickets` (array)
            for (const item of data['tickets']) {
                EventTicketInfoDtoTicketsInner.validateJSON(item);
            };
        }
        if (data['guests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['guests'])) {
                throw new Error("Expected the field `guests` to be an array in the JSON data but got " + data['guests']);
            }
            // validate the optional field `guests` (array)
            for (const item of data['guests']) {
                EventTicketInfoDtoGuestsInner.validateJSON(item);
            };
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                EventTicketInfoDtoTicketsInnerTicketGiftsInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventTicketInfoDto.RequiredProperties = ["eventPhoto", "eventTitle", "eventDescription", "eventState", "eventCity", "eventAddress", "eventNumber", "eventDistrict", "eventComplement", "eventLatitude", "eventLongitude", "eventStartAt", "eventEndAt", "tickets", "links"];

/**
 * @member {String} eventPhoto
 */
EventTicketInfoDto.prototype['eventPhoto'] = undefined;

/**
 * @member {String} eventTitle
 */
EventTicketInfoDto.prototype['eventTitle'] = undefined;

/**
 * @member {String} eventDescription
 */
EventTicketInfoDto.prototype['eventDescription'] = undefined;

/**
 * @member {String} eventState
 */
EventTicketInfoDto.prototype['eventState'] = undefined;

/**
 * @member {String} eventCity
 */
EventTicketInfoDto.prototype['eventCity'] = undefined;

/**
 * @member {String} eventAddress
 */
EventTicketInfoDto.prototype['eventAddress'] = undefined;

/**
 * @member {String} eventNumber
 */
EventTicketInfoDto.prototype['eventNumber'] = undefined;

/**
 * @member {String} eventDistrict
 */
EventTicketInfoDto.prototype['eventDistrict'] = undefined;

/**
 * @member {String} eventComplement
 */
EventTicketInfoDto.prototype['eventComplement'] = undefined;

/**
 * @member {String} eventLatitude
 */
EventTicketInfoDto.prototype['eventLatitude'] = undefined;

/**
 * @member {String} eventLongitude
 */
EventTicketInfoDto.prototype['eventLongitude'] = undefined;

/**
 * @member {Object} eventStartAt
 */
EventTicketInfoDto.prototype['eventStartAt'] = undefined;

/**
 * @member {Object} eventEndAt
 */
EventTicketInfoDto.prototype['eventEndAt'] = undefined;

/**
 * @member {Array.<module:model/EventTicketInfoDtoTicketsInner>} tickets
 */
EventTicketInfoDto.prototype['tickets'] = undefined;

/**
 * @member {Array.<module:model/EventTicketInfoDtoGuestsInner>} guests
 */
EventTicketInfoDto.prototype['guests'] = undefined;

/**
 * @member {Array.<module:model/EventTicketInfoDtoTicketsInnerTicketGiftsInner>} links
 */
EventTicketInfoDto.prototype['links'] = undefined;






export default EventTicketInfoDto;

