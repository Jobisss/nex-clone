/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventQuizCreateDtoQuestionsInnerQuestionOptionsInner from './EventQuizCreateDtoQuestionsInnerQuestionOptionsInner';

/**
 * The EventQuizCreateDtoQuestionsInner model module.
 * @module model/EventQuizCreateDtoQuestionsInner
 * @version 1.0
 */
class EventQuizCreateDtoQuestionsInner {
    /**
     * Constructs a new <code>EventQuizCreateDtoQuestionsInner</code>.
     * @alias module:model/EventQuizCreateDtoQuestionsInner
     * @param description {String} 
     * @param sequential {Number} 
     * @param questionType {module:model/EventQuizCreateDtoQuestionsInner.QuestionTypeEnum} 
     * @param isMandatory {Boolean} 
     * @param multipleChoice {Boolean} 
     */
    constructor(description, sequential, questionType, isMandatory, multipleChoice) { 
        
        EventQuizCreateDtoQuestionsInner.initialize(this, description, sequential, questionType, isMandatory, multipleChoice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, sequential, questionType, isMandatory, multipleChoice) { 
        obj['description'] = description;
        obj['sequential'] = sequential;
        obj['questionType'] = questionType;
        obj['isMandatory'] = isMandatory;
        obj['multipleChoice'] = multipleChoice;
    }

    /**
     * Constructs a <code>EventQuizCreateDtoQuestionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventQuizCreateDtoQuestionsInner} obj Optional instance to populate.
     * @return {module:model/EventQuizCreateDtoQuestionsInner} The populated <code>EventQuizCreateDtoQuestionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventQuizCreateDtoQuestionsInner();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('sequential')) {
                obj['sequential'] = ApiClient.convertToType(data['sequential'], 'Number');
            }
            if (data.hasOwnProperty('questionType')) {
                obj['questionType'] = ApiClient.convertToType(data['questionType'], 'String');
            }
            if (data.hasOwnProperty('isMandatory')) {
                obj['isMandatory'] = ApiClient.convertToType(data['isMandatory'], 'Boolean');
            }
            if (data.hasOwnProperty('multipleChoice')) {
                obj['multipleChoice'] = ApiClient.convertToType(data['multipleChoice'], 'Boolean');
            }
            if (data.hasOwnProperty('questionOptions')) {
                obj['questionOptions'] = ApiClient.convertToType(data['questionOptions'], [EventQuizCreateDtoQuestionsInnerQuestionOptionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventQuizCreateDtoQuestionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventQuizCreateDtoQuestionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventQuizCreateDtoQuestionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['questionType'] && !(typeof data['questionType'] === 'string' || data['questionType'] instanceof String)) {
            throw new Error("Expected the field `questionType` to be a primitive type in the JSON string but got " + data['questionType']);
        }
        if (data['questionOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questionOptions'])) {
                throw new Error("Expected the field `questionOptions` to be an array in the JSON data but got " + data['questionOptions']);
            }
            // validate the optional field `questionOptions` (array)
            for (const item of data['questionOptions']) {
                EventQuizCreateDtoQuestionsInnerQuestionOptionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventQuizCreateDtoQuestionsInner.RequiredProperties = ["description", "sequential", "questionType", "isMandatory", "multipleChoice"];

/**
 * @member {String} description
 */
EventQuizCreateDtoQuestionsInner.prototype['description'] = undefined;

/**
 * @member {Number} sequential
 */
EventQuizCreateDtoQuestionsInner.prototype['sequential'] = undefined;

/**
 * @member {module:model/EventQuizCreateDtoQuestionsInner.QuestionTypeEnum} questionType
 */
EventQuizCreateDtoQuestionsInner.prototype['questionType'] = undefined;

/**
 * @member {Boolean} isMandatory
 */
EventQuizCreateDtoQuestionsInner.prototype['isMandatory'] = undefined;

/**
 * @member {Boolean} multipleChoice
 */
EventQuizCreateDtoQuestionsInner.prototype['multipleChoice'] = undefined;

/**
 * @member {Array.<module:model/EventQuizCreateDtoQuestionsInnerQuestionOptionsInner>} questionOptions
 */
EventQuizCreateDtoQuestionsInner.prototype['questionOptions'] = undefined;





/**
 * Allowed values for the <code>questionType</code> property.
 * @enum {String}
 * @readonly
 */
EventQuizCreateDtoQuestionsInner['QuestionTypeEnum'] = {

    /**
     * value: "MULTIPLE_CHOICE"
     * @const
     */
    "MULTIPLE_CHOICE": "MULTIPLE_CHOICE",

    /**
     * value: "RATING"
     * @const
     */
    "RATING": "RATING",

    /**
     * value: "DESCRIPTIVE"
     * @const
     */
    "DESCRIPTIVE": "DESCRIPTIVE"
};



export default EventQuizCreateDtoQuestionsInner;

