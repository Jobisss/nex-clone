/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventParticipantCreateDtoNetworksInner from './EventParticipantCreateDtoNetworksInner';
import EventTicketSellDtoEventTicketsInner from './EventTicketSellDtoEventTicketsInner';
import EventTicketSellDtoUser from './EventTicketSellDtoUser';

/**
 * The EventTicketSellDto model module.
 * @module model/EventTicketSellDto
 * @version 1.0
 */
class EventTicketSellDto {
    /**
     * Constructs a new <code>EventTicketSellDto</code>.
     * @alias module:model/EventTicketSellDto
     * @param eventSlug {String} 
     * @param eventTickets {Array.<module:model/EventTicketSellDtoEventTicketsInner>} 
     */
    constructor(eventSlug, eventTickets) { 
        
        EventTicketSellDto.initialize(this, eventSlug, eventTickets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventSlug, eventTickets) { 
        obj['eventSlug'] = eventSlug;
        obj['eventTickets'] = eventTickets;
    }

    /**
     * Constructs a <code>EventTicketSellDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketSellDto} obj Optional instance to populate.
     * @return {module:model/EventTicketSellDto} The populated <code>EventTicketSellDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketSellDto();

            if (data.hasOwnProperty('eventSlug')) {
                obj['eventSlug'] = ApiClient.convertToType(data['eventSlug'], 'String');
            }
            if (data.hasOwnProperty('eventTickets')) {
                obj['eventTickets'] = ApiClient.convertToType(data['eventTickets'], [EventTicketSellDtoEventTicketsInner]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EventTicketSellDtoUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [EventParticipantCreateDtoNetworksInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketSellDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketSellDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketSellDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventSlug'] && !(typeof data['eventSlug'] === 'string' || data['eventSlug'] instanceof String)) {
            throw new Error("Expected the field `eventSlug` to be a primitive type in the JSON string but got " + data['eventSlug']);
        }
        if (data['eventTickets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTickets'])) {
                throw new Error("Expected the field `eventTickets` to be an array in the JSON data but got " + data['eventTickets']);
            }
            // validate the optional field `eventTickets` (array)
            for (const item of data['eventTickets']) {
                EventTicketSellDtoEventTicketsInner.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EventTicketSellDtoUser.validateJSON(data['user']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                EventParticipantCreateDtoNetworksInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventTicketSellDto.RequiredProperties = ["eventSlug", "eventTickets"];

/**
 * @member {String} eventSlug
 */
EventTicketSellDto.prototype['eventSlug'] = undefined;

/**
 * @member {Array.<module:model/EventTicketSellDtoEventTicketsInner>} eventTickets
 */
EventTicketSellDto.prototype['eventTickets'] = undefined;

/**
 * @member {module:model/EventTicketSellDtoUser} user
 */
EventTicketSellDto.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/EventParticipantCreateDtoNetworksInner>} networks
 */
EventTicketSellDto.prototype['networks'] = undefined;






export default EventTicketSellDto;

