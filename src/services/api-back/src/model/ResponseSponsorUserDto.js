/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResponseSponsorUserDto model module.
 * @module model/ResponseSponsorUserDto
 * @version 1.0
 */
class ResponseSponsorUserDto {
    /**
     * Constructs a new <code>ResponseSponsorUserDto</code>.
     * @alias module:model/ResponseSponsorUserDto
     * @param id {String} 
     * @param userId {String} 
     * @param secretKey {String} 
     * @param publicKey {String} 
     */
    constructor(id, userId, secretKey, publicKey) { 
        
        ResponseSponsorUserDto.initialize(this, id, userId, secretKey, publicKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, userId, secretKey, publicKey) { 
        obj['id'] = id;
        obj['userId'] = userId;
        obj['secretKey'] = secretKey;
        obj['publicKey'] = publicKey;
    }

    /**
     * Constructs a <code>ResponseSponsorUserDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseSponsorUserDto} obj Optional instance to populate.
     * @return {module:model/ResponseSponsorUserDto} The populated <code>ResponseSponsorUserDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseSponsorUserDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('secretKey')) {
                obj['secretKey'] = ApiClient.convertToType(data['secretKey'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseSponsorUserDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseSponsorUserDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseSponsorUserDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['secretKey'] && !(typeof data['secretKey'] === 'string' || data['secretKey'] instanceof String)) {
            throw new Error("Expected the field `secretKey` to be a primitive type in the JSON string but got " + data['secretKey']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }

        return true;
    }


}

ResponseSponsorUserDto.RequiredProperties = ["id", "userId", "secretKey", "publicKey"];

/**
 * @member {String} id
 */
ResponseSponsorUserDto.prototype['id'] = undefined;

/**
 * @member {String} userId
 */
ResponseSponsorUserDto.prototype['userId'] = undefined;

/**
 * @member {String} secretKey
 */
ResponseSponsorUserDto.prototype['secretKey'] = undefined;

/**
 * @member {String} publicKey
 */
ResponseSponsorUserDto.prototype['publicKey'] = undefined;






export default ResponseSponsorUserDto;

