/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListTicketsDtoInner model module.
 * @module model/ListTicketsDtoInner
 * @version 1.0
 */
class ListTicketsDtoInner {
    /**
     * Constructs a new <code>ListTicketsDtoInner</code>.
     * @alias module:model/ListTicketsDtoInner
     * @param id {String} 
     * @param eventSlug {String} 
     * @param eventPhoto {String} 
     * @param eventTitle {String} 
     * @param eventStartAt {Object} 
     * @param eventLocation {module:model/ListTicketsDtoInner.EventLocationEnum} 
     * @param eventLatitude {String} 
     * @param eventLongitude {String} 
     * @param state {String} 
     * @param city {String} 
     * @param address {String} 
     * @param complement {String} 
     * @param country {String} 
     * @param number {String} 
     * @param district {String} 
     */
    constructor(id, eventSlug, eventPhoto, eventTitle, eventStartAt, eventLocation, eventLatitude, eventLongitude, state, city, address, complement, country, number, district) { 
        
        ListTicketsDtoInner.initialize(this, id, eventSlug, eventPhoto, eventTitle, eventStartAt, eventLocation, eventLatitude, eventLongitude, state, city, address, complement, country, number, district);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, eventSlug, eventPhoto, eventTitle, eventStartAt, eventLocation, eventLatitude, eventLongitude, state, city, address, complement, country, number, district) { 
        obj['id'] = id;
        obj['eventSlug'] = eventSlug;
        obj['eventPhoto'] = eventPhoto;
        obj['eventTitle'] = eventTitle;
        obj['eventStartAt'] = eventStartAt;
        obj['eventLocation'] = eventLocation;
        obj['eventLatitude'] = eventLatitude;
        obj['eventLongitude'] = eventLongitude;
        obj['state'] = state;
        obj['city'] = city;
        obj['address'] = address;
        obj['complement'] = complement;
        obj['country'] = country;
        obj['number'] = number;
        obj['district'] = district;
    }

    /**
     * Constructs a <code>ListTicketsDtoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListTicketsDtoInner} obj Optional instance to populate.
     * @return {module:model/ListTicketsDtoInner} The populated <code>ListTicketsDtoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListTicketsDtoInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('eventSlug')) {
                obj['eventSlug'] = ApiClient.convertToType(data['eventSlug'], 'String');
            }
            if (data.hasOwnProperty('eventPhoto')) {
                obj['eventPhoto'] = ApiClient.convertToType(data['eventPhoto'], 'String');
            }
            if (data.hasOwnProperty('eventTitle')) {
                obj['eventTitle'] = ApiClient.convertToType(data['eventTitle'], 'String');
            }
            if (data.hasOwnProperty('eventStartAt')) {
                obj['eventStartAt'] = ApiClient.convertToType(data['eventStartAt'], Object);
            }
            if (data.hasOwnProperty('eventLocation')) {
                obj['eventLocation'] = ApiClient.convertToType(data['eventLocation'], 'String');
            }
            if (data.hasOwnProperty('eventLatitude')) {
                obj['eventLatitude'] = ApiClient.convertToType(data['eventLatitude'], 'String');
            }
            if (data.hasOwnProperty('eventLongitude')) {
                obj['eventLongitude'] = ApiClient.convertToType(data['eventLongitude'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListTicketsDtoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListTicketsDtoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListTicketsDtoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['eventSlug'] && !(typeof data['eventSlug'] === 'string' || data['eventSlug'] instanceof String)) {
            throw new Error("Expected the field `eventSlug` to be a primitive type in the JSON string but got " + data['eventSlug']);
        }
        // ensure the json data is a string
        if (data['eventPhoto'] && !(typeof data['eventPhoto'] === 'string' || data['eventPhoto'] instanceof String)) {
            throw new Error("Expected the field `eventPhoto` to be a primitive type in the JSON string but got " + data['eventPhoto']);
        }
        // ensure the json data is a string
        if (data['eventTitle'] && !(typeof data['eventTitle'] === 'string' || data['eventTitle'] instanceof String)) {
            throw new Error("Expected the field `eventTitle` to be a primitive type in the JSON string but got " + data['eventTitle']);
        }
        // ensure the json data is a string
        if (data['eventLocation'] && !(typeof data['eventLocation'] === 'string' || data['eventLocation'] instanceof String)) {
            throw new Error("Expected the field `eventLocation` to be a primitive type in the JSON string but got " + data['eventLocation']);
        }
        // ensure the json data is a string
        if (data['eventLatitude'] && !(typeof data['eventLatitude'] === 'string' || data['eventLatitude'] instanceof String)) {
            throw new Error("Expected the field `eventLatitude` to be a primitive type in the JSON string but got " + data['eventLatitude']);
        }
        // ensure the json data is a string
        if (data['eventLongitude'] && !(typeof data['eventLongitude'] === 'string' || data['eventLongitude'] instanceof String)) {
            throw new Error("Expected the field `eventLongitude` to be a primitive type in the JSON string but got " + data['eventLongitude']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }

        return true;
    }


}

ListTicketsDtoInner.RequiredProperties = ["id", "eventSlug", "eventPhoto", "eventTitle", "eventStartAt", "eventLocation", "eventLatitude", "eventLongitude", "state", "city", "address", "complement", "country", "number", "district"];

/**
 * @member {String} id
 */
ListTicketsDtoInner.prototype['id'] = undefined;

/**
 * @member {String} eventSlug
 */
ListTicketsDtoInner.prototype['eventSlug'] = undefined;

/**
 * @member {String} eventPhoto
 */
ListTicketsDtoInner.prototype['eventPhoto'] = undefined;

/**
 * @member {String} eventTitle
 */
ListTicketsDtoInner.prototype['eventTitle'] = undefined;

/**
 * @member {Object} eventStartAt
 */
ListTicketsDtoInner.prototype['eventStartAt'] = undefined;

/**
 * @member {module:model/ListTicketsDtoInner.EventLocationEnum} eventLocation
 */
ListTicketsDtoInner.prototype['eventLocation'] = undefined;

/**
 * @member {String} eventLatitude
 */
ListTicketsDtoInner.prototype['eventLatitude'] = undefined;

/**
 * @member {String} eventLongitude
 */
ListTicketsDtoInner.prototype['eventLongitude'] = undefined;

/**
 * @member {String} state
 */
ListTicketsDtoInner.prototype['state'] = undefined;

/**
 * @member {String} city
 */
ListTicketsDtoInner.prototype['city'] = undefined;

/**
 * @member {String} address
 */
ListTicketsDtoInner.prototype['address'] = undefined;

/**
 * @member {String} complement
 */
ListTicketsDtoInner.prototype['complement'] = undefined;

/**
 * @member {String} country
 */
ListTicketsDtoInner.prototype['country'] = undefined;

/**
 * @member {String} number
 */
ListTicketsDtoInner.prototype['number'] = undefined;

/**
 * @member {String} district
 */
ListTicketsDtoInner.prototype['district'] = undefined;





/**
 * Allowed values for the <code>eventLocation</code> property.
 * @enum {String}
 * @readonly
 */
ListTicketsDtoInner['EventLocationEnum'] = {

    /**
     * value: "ONLINE"
     * @const
     */
    "ONLINE": "ONLINE",

    /**
     * value: "UNDEFINED"
     * @const
     */
    "UNDEFINED": "UNDEFINED",

    /**
     * value: "DEFINED"
     * @const
     */
    "DEFINED": "DEFINED"
};



export default ListTicketsDtoInner;

