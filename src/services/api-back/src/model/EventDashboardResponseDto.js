/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventDashboardResponseDtoEventTicketPercentualSellInner from './EventDashboardResponseDtoEventTicketPercentualSellInner';
import EventDashboardResponseDtoEventTicketsInner from './EventDashboardResponseDtoEventTicketsInner';
import EventDashboardResponseDtoSellDiaryInner from './EventDashboardResponseDtoSellDiaryInner';

/**
 * The EventDashboardResponseDto model module.
 * @module model/EventDashboardResponseDto
 * @version 1.0
 */
class EventDashboardResponseDto {
    /**
     * Constructs a new <code>EventDashboardResponseDto</code>.
     * @alias module:model/EventDashboardResponseDto
     * @param id {String} 
     * @param title {String} 
     * @param slug {String} 
     * @param paymentStatus {String} 
     * @param paymentUrl {String} 
     * @param status {module:model/EventDashboardResponseDto.StatusEnum} 
     * @param eventStaff {Number} 
     * @param eventViews {Number} 
     * @param eventCity {String} 
     * @param eventState {String} 
     * @param startAt {Object} 
     * @param _public {Boolean} 
     * @param eventParticipantsCount {Number} 
     * @param eventParticipantLimitCount {Number} 
     * @param eventParcitipantAccreditationsCount {Number} 
     * @param eventParcitipantAccreditationsPercentual {Number} 
     * @param currency {String} 
     * @param eventTotal {Number} 
     * @param eventTickets {Array.<module:model/EventDashboardResponseDtoEventTicketsInner>} 
     * @param eventTicketPercentualSell {Array.<module:model/EventDashboardResponseDtoEventTicketPercentualSellInner>} 
     * @param sellDiary {Array.<module:model/EventDashboardResponseDtoSellDiaryInner>} 
     */
    constructor(id, title, slug, paymentStatus, paymentUrl, status, eventStaff, eventViews, eventCity, eventState, startAt, _public, eventParticipantsCount, eventParticipantLimitCount, eventParcitipantAccreditationsCount, eventParcitipantAccreditationsPercentual, currency, eventTotal, eventTickets, eventTicketPercentualSell, sellDiary) { 
        
        EventDashboardResponseDto.initialize(this, id, title, slug, paymentStatus, paymentUrl, status, eventStaff, eventViews, eventCity, eventState, startAt, _public, eventParticipantsCount, eventParticipantLimitCount, eventParcitipantAccreditationsCount, eventParcitipantAccreditationsPercentual, currency, eventTotal, eventTickets, eventTicketPercentualSell, sellDiary);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, slug, paymentStatus, paymentUrl, status, eventStaff, eventViews, eventCity, eventState, startAt, _public, eventParticipantsCount, eventParticipantLimitCount, eventParcitipantAccreditationsCount, eventParcitipantAccreditationsPercentual, currency, eventTotal, eventTickets, eventTicketPercentualSell, sellDiary) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['slug'] = slug;
        obj['paymentStatus'] = paymentStatus;
        obj['paymentUrl'] = paymentUrl;
        obj['status'] = status;
        obj['eventStaff'] = eventStaff;
        obj['eventViews'] = eventViews;
        obj['eventCity'] = eventCity;
        obj['eventState'] = eventState;
        obj['startAt'] = startAt;
        obj['public'] = _public;
        obj['eventParticipantsCount'] = eventParticipantsCount;
        obj['eventParticipantLimitCount'] = eventParticipantLimitCount;
        obj['eventParcitipantAccreditationsCount'] = eventParcitipantAccreditationsCount;
        obj['eventParcitipantAccreditationsPercentual'] = eventParcitipantAccreditationsPercentual;
        obj['currency'] = currency;
        obj['eventTotal'] = eventTotal;
        obj['eventTickets'] = eventTickets;
        obj['eventTicketPercentualSell'] = eventTicketPercentualSell;
        obj['sellDiary'] = sellDiary;
    }

    /**
     * Constructs a <code>EventDashboardResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDashboardResponseDto} obj Optional instance to populate.
     * @return {module:model/EventDashboardResponseDto} The populated <code>EventDashboardResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDashboardResponseDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'String');
            }
            if (data.hasOwnProperty('paymentUrl')) {
                obj['paymentUrl'] = ApiClient.convertToType(data['paymentUrl'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('eventStaff')) {
                obj['eventStaff'] = ApiClient.convertToType(data['eventStaff'], 'Number');
            }
            if (data.hasOwnProperty('eventViews')) {
                obj['eventViews'] = ApiClient.convertToType(data['eventViews'], 'Number');
            }
            if (data.hasOwnProperty('eventCity')) {
                obj['eventCity'] = ApiClient.convertToType(data['eventCity'], 'String');
            }
            if (data.hasOwnProperty('eventState')) {
                obj['eventState'] = ApiClient.convertToType(data['eventState'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], Object);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('eventParticipantsCount')) {
                obj['eventParticipantsCount'] = ApiClient.convertToType(data['eventParticipantsCount'], 'Number');
            }
            if (data.hasOwnProperty('eventParticipantLimitCount')) {
                obj['eventParticipantLimitCount'] = ApiClient.convertToType(data['eventParticipantLimitCount'], 'Number');
            }
            if (data.hasOwnProperty('eventParcitipantAccreditationsCount')) {
                obj['eventParcitipantAccreditationsCount'] = ApiClient.convertToType(data['eventParcitipantAccreditationsCount'], 'Number');
            }
            if (data.hasOwnProperty('eventParcitipantAccreditationsPercentual')) {
                obj['eventParcitipantAccreditationsPercentual'] = ApiClient.convertToType(data['eventParcitipantAccreditationsPercentual'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('eventTotal')) {
                obj['eventTotal'] = ApiClient.convertToType(data['eventTotal'], 'Number');
            }
            if (data.hasOwnProperty('eventTickets')) {
                obj['eventTickets'] = ApiClient.convertToType(data['eventTickets'], [EventDashboardResponseDtoEventTicketsInner]);
            }
            if (data.hasOwnProperty('eventTicketPercentualSell')) {
                obj['eventTicketPercentualSell'] = ApiClient.convertToType(data['eventTicketPercentualSell'], [EventDashboardResponseDtoEventTicketPercentualSellInner]);
            }
            if (data.hasOwnProperty('sellDiary')) {
                obj['sellDiary'] = ApiClient.convertToType(data['sellDiary'], [EventDashboardResponseDtoSellDiaryInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDashboardResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDashboardResponseDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventDashboardResponseDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['paymentStatus'] && !(typeof data['paymentStatus'] === 'string' || data['paymentStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentStatus` to be a primitive type in the JSON string but got " + data['paymentStatus']);
        }
        // ensure the json data is a string
        if (data['paymentUrl'] && !(typeof data['paymentUrl'] === 'string' || data['paymentUrl'] instanceof String)) {
            throw new Error("Expected the field `paymentUrl` to be a primitive type in the JSON string but got " + data['paymentUrl']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['eventCity'] && !(typeof data['eventCity'] === 'string' || data['eventCity'] instanceof String)) {
            throw new Error("Expected the field `eventCity` to be a primitive type in the JSON string but got " + data['eventCity']);
        }
        // ensure the json data is a string
        if (data['eventState'] && !(typeof data['eventState'] === 'string' || data['eventState'] instanceof String)) {
            throw new Error("Expected the field `eventState` to be a primitive type in the JSON string but got " + data['eventState']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['eventTickets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTickets'])) {
                throw new Error("Expected the field `eventTickets` to be an array in the JSON data but got " + data['eventTickets']);
            }
            // validate the optional field `eventTickets` (array)
            for (const item of data['eventTickets']) {
                EventDashboardResponseDtoEventTicketsInner.validateJSON(item);
            };
        }
        if (data['eventTicketPercentualSell']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTicketPercentualSell'])) {
                throw new Error("Expected the field `eventTicketPercentualSell` to be an array in the JSON data but got " + data['eventTicketPercentualSell']);
            }
            // validate the optional field `eventTicketPercentualSell` (array)
            for (const item of data['eventTicketPercentualSell']) {
                EventDashboardResponseDtoEventTicketPercentualSellInner.validateJSON(item);
            };
        }
        if (data['sellDiary']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellDiary'])) {
                throw new Error("Expected the field `sellDiary` to be an array in the JSON data but got " + data['sellDiary']);
            }
            // validate the optional field `sellDiary` (array)
            for (const item of data['sellDiary']) {
                EventDashboardResponseDtoSellDiaryInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventDashboardResponseDto.RequiredProperties = ["id", "title", "slug", "paymentStatus", "paymentUrl", "status", "eventStaff", "eventViews", "eventCity", "eventState", "startAt", "public", "eventParticipantsCount", "eventParticipantLimitCount", "eventParcitipantAccreditationsCount", "eventParcitipantAccreditationsPercentual", "currency", "eventTotal", "eventTickets", "eventTicketPercentualSell", "sellDiary"];

/**
 * @member {String} id
 */
EventDashboardResponseDto.prototype['id'] = undefined;

/**
 * @member {String} title
 */
EventDashboardResponseDto.prototype['title'] = undefined;

/**
 * @member {String} slug
 */
EventDashboardResponseDto.prototype['slug'] = undefined;

/**
 * @member {String} paymentStatus
 */
EventDashboardResponseDto.prototype['paymentStatus'] = undefined;

/**
 * @member {String} paymentUrl
 */
EventDashboardResponseDto.prototype['paymentUrl'] = undefined;

/**
 * @member {module:model/EventDashboardResponseDto.StatusEnum} status
 */
EventDashboardResponseDto.prototype['status'] = undefined;

/**
 * @member {Number} eventStaff
 */
EventDashboardResponseDto.prototype['eventStaff'] = undefined;

/**
 * @member {Number} eventViews
 */
EventDashboardResponseDto.prototype['eventViews'] = undefined;

/**
 * @member {String} eventCity
 */
EventDashboardResponseDto.prototype['eventCity'] = undefined;

/**
 * @member {String} eventState
 */
EventDashboardResponseDto.prototype['eventState'] = undefined;

/**
 * @member {Object} startAt
 */
EventDashboardResponseDto.prototype['startAt'] = undefined;

/**
 * @member {Boolean} public
 */
EventDashboardResponseDto.prototype['public'] = undefined;

/**
 * @member {Number} eventParticipantsCount
 */
EventDashboardResponseDto.prototype['eventParticipantsCount'] = undefined;

/**
 * @member {Number} eventParticipantLimitCount
 */
EventDashboardResponseDto.prototype['eventParticipantLimitCount'] = undefined;

/**
 * @member {Number} eventParcitipantAccreditationsCount
 */
EventDashboardResponseDto.prototype['eventParcitipantAccreditationsCount'] = undefined;

/**
 * @member {Number} eventParcitipantAccreditationsPercentual
 */
EventDashboardResponseDto.prototype['eventParcitipantAccreditationsPercentual'] = undefined;

/**
 * @member {String} currency
 */
EventDashboardResponseDto.prototype['currency'] = undefined;

/**
 * @member {Number} eventTotal
 */
EventDashboardResponseDto.prototype['eventTotal'] = undefined;

/**
 * @member {Array.<module:model/EventDashboardResponseDtoEventTicketsInner>} eventTickets
 */
EventDashboardResponseDto.prototype['eventTickets'] = undefined;

/**
 * @member {Array.<module:model/EventDashboardResponseDtoEventTicketPercentualSellInner>} eventTicketPercentualSell
 */
EventDashboardResponseDto.prototype['eventTicketPercentualSell'] = undefined;

/**
 * @member {Array.<module:model/EventDashboardResponseDtoSellDiaryInner>} sellDiary
 */
EventDashboardResponseDto.prototype['sellDiary'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
EventDashboardResponseDto['StatusEnum'] = {

    /**
     * value: "ENABLE"
     * @const
     */
    "ENABLE": "ENABLE",

    /**
     * value: "DISABLE"
     * @const
     */
    "DISABLE": "DISABLE"
};



export default EventDashboardResponseDto;

