/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FindTicketByLinkResponseDtoTicketDaysInner from './FindTicketByLinkResponseDtoTicketDaysInner';

/**
 * The FindTicketByLinkResponseDto model module.
 * @module model/FindTicketByLinkResponseDto
 * @version 1.0
 */
class FindTicketByLinkResponseDto {
    /**
     * Constructs a new <code>FindTicketByLinkResponseDto</code>.
     * @alias module:model/FindTicketByLinkResponseDto
     * @param id {String} 
     * @param ticketName {String} 
     * @param description {String} 
     * @param ticketDays {Array.<module:model/FindTicketByLinkResponseDtoTicketDaysInner>} 
     */
    constructor(id, ticketName, description, ticketDays) { 
        
        FindTicketByLinkResponseDto.initialize(this, id, ticketName, description, ticketDays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, ticketName, description, ticketDays) { 
        obj['id'] = id;
        obj['ticketName'] = ticketName;
        obj['description'] = description;
        obj['ticketDays'] = ticketDays;
    }

    /**
     * Constructs a <code>FindTicketByLinkResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindTicketByLinkResponseDto} obj Optional instance to populate.
     * @return {module:model/FindTicketByLinkResponseDto} The populated <code>FindTicketByLinkResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindTicketByLinkResponseDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ticketName')) {
                obj['ticketName'] = ApiClient.convertToType(data['ticketName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ticketDays')) {
                obj['ticketDays'] = ApiClient.convertToType(data['ticketDays'], [FindTicketByLinkResponseDtoTicketDaysInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindTicketByLinkResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindTicketByLinkResponseDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindTicketByLinkResponseDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ticketName'] && !(typeof data['ticketName'] === 'string' || data['ticketName'] instanceof String)) {
            throw new Error("Expected the field `ticketName` to be a primitive type in the JSON string but got " + data['ticketName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['ticketDays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ticketDays'])) {
                throw new Error("Expected the field `ticketDays` to be an array in the JSON data but got " + data['ticketDays']);
            }
            // validate the optional field `ticketDays` (array)
            for (const item of data['ticketDays']) {
                FindTicketByLinkResponseDtoTicketDaysInner.validateJSON(item);
            };
        }

        return true;
    }


}

FindTicketByLinkResponseDto.RequiredProperties = ["id", "ticketName", "description", "ticketDays"];

/**
 * @member {String} id
 */
FindTicketByLinkResponseDto.prototype['id'] = undefined;

/**
 * @member {String} ticketName
 */
FindTicketByLinkResponseDto.prototype['ticketName'] = undefined;

/**
 * @member {String} description
 */
FindTicketByLinkResponseDto.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/FindTicketByLinkResponseDtoTicketDaysInner>} ticketDays
 */
FindTicketByLinkResponseDto.prototype['ticketDays'] = undefined;






export default FindTicketByLinkResponseDto;

