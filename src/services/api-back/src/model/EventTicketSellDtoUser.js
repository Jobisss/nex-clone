/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventTicketSellDtoUser model module.
 * @module model/EventTicketSellDtoUser
 * @version 1.0
 */
class EventTicketSellDtoUser {
    /**
     * Constructs a new <code>EventTicketSellDtoUser</code>.
     * @alias module:model/EventTicketSellDtoUser
     * @param name {String} 
     * @param email {String} 
     * @param state {String} 
     * @param city {String} 
     */
    constructor(name, email, state, city) { 
        
        EventTicketSellDtoUser.initialize(this, name, email, state, city);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, email, state, city) { 
        obj['name'] = name;
        obj['email'] = email;
        obj['state'] = state;
        obj['city'] = city;
    }

    /**
     * Constructs a <code>EventTicketSellDtoUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketSellDtoUser} obj Optional instance to populate.
     * @return {module:model/EventTicketSellDtoUser} The populated <code>EventTicketSellDtoUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketSellDtoUser();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phoneCountry')) {
                obj['phoneCountry'] = ApiClient.convertToType(data['phoneCountry'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketSellDtoUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketSellDtoUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketSellDtoUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phoneCountry'] && !(typeof data['phoneCountry'] === 'string' || data['phoneCountry'] instanceof String)) {
            throw new Error("Expected the field `phoneCountry` to be a primitive type in the JSON string but got " + data['phoneCountry']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }

        return true;
    }


}

EventTicketSellDtoUser.RequiredProperties = ["name", "email", "state", "city"];

/**
 * @member {String} name
 */
EventTicketSellDtoUser.prototype['name'] = undefined;

/**
 * @member {String} email
 */
EventTicketSellDtoUser.prototype['email'] = undefined;

/**
 * Event participant phone country
 * @member {String} phoneCountry
 */
EventTicketSellDtoUser.prototype['phoneCountry'] = undefined;

/**
 * Event participant phone number
 * @member {String} phoneNumber
 */
EventTicketSellDtoUser.prototype['phoneNumber'] = undefined;

/**
 * @member {String} document
 */
EventTicketSellDtoUser.prototype['document'] = undefined;

/**
 * @member {String} state
 */
EventTicketSellDtoUser.prototype['state'] = undefined;

/**
 * @member {String} city
 */
EventTicketSellDtoUser.prototype['city'] = undefined;






export default EventTicketSellDtoUser;

