/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventQuizDashboarDtoMultipleChoiceInnerOptionsInner from './EventQuizDashboarDtoMultipleChoiceInnerOptionsInner';

/**
 * The EventQuizDashboarDtoMultipleChoiceInner model module.
 * @module model/EventQuizDashboarDtoMultipleChoiceInner
 * @version 1.0
 */
class EventQuizDashboarDtoMultipleChoiceInner {
    /**
     * Constructs a new <code>EventQuizDashboarDtoMultipleChoiceInner</code>.
     * @alias module:model/EventQuizDashboarDtoMultipleChoiceInner
     * @param questionId {String} 
     * @param totalResponses {Number} 
     * @param options {Array.<module:model/EventQuizDashboarDtoMultipleChoiceInnerOptionsInner>} 
     */
    constructor(questionId, totalResponses, options) { 
        
        EventQuizDashboarDtoMultipleChoiceInner.initialize(this, questionId, totalResponses, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, questionId, totalResponses, options) { 
        obj['questionId'] = questionId;
        obj['totalResponses'] = totalResponses;
        obj['options'] = options;
    }

    /**
     * Constructs a <code>EventQuizDashboarDtoMultipleChoiceInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventQuizDashboarDtoMultipleChoiceInner} obj Optional instance to populate.
     * @return {module:model/EventQuizDashboarDtoMultipleChoiceInner} The populated <code>EventQuizDashboarDtoMultipleChoiceInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventQuizDashboarDtoMultipleChoiceInner();

            if (data.hasOwnProperty('questionId')) {
                obj['questionId'] = ApiClient.convertToType(data['questionId'], 'String');
            }
            if (data.hasOwnProperty('totalResponses')) {
                obj['totalResponses'] = ApiClient.convertToType(data['totalResponses'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [EventQuizDashboarDtoMultipleChoiceInnerOptionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventQuizDashboarDtoMultipleChoiceInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventQuizDashboarDtoMultipleChoiceInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventQuizDashboarDtoMultipleChoiceInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['questionId'] && !(typeof data['questionId'] === 'string' || data['questionId'] instanceof String)) {
            throw new Error("Expected the field `questionId` to be a primitive type in the JSON string but got " + data['questionId']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                EventQuizDashboarDtoMultipleChoiceInnerOptionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventQuizDashboarDtoMultipleChoiceInner.RequiredProperties = ["questionId", "totalResponses", "options"];

/**
 * @member {String} questionId
 */
EventQuizDashboarDtoMultipleChoiceInner.prototype['questionId'] = undefined;

/**
 * @member {Number} totalResponses
 */
EventQuizDashboarDtoMultipleChoiceInner.prototype['totalResponses'] = undefined;

/**
 * @member {Array.<module:model/EventQuizDashboarDtoMultipleChoiceInnerOptionsInner>} options
 */
EventQuizDashboarDtoMultipleChoiceInner.prototype['options'] = undefined;






export default EventQuizDashboarDtoMultipleChoiceInner;

