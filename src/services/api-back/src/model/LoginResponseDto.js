/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoginResponseDto model module.
 * @module model/LoginResponseDto
 * @version 1.0
 */
class LoginResponseDto {
    /**
     * Constructs a new <code>LoginResponseDto</code>.
     * @alias module:model/LoginResponseDto
     * @param token {String} 
     * @param userType {module:model/LoginResponseDto.UserTypeEnum} 
     * @param haveTickets {Boolean} 
     * @param haveEvents {Boolean} 
     */
    constructor(token, userType, haveTickets, haveEvents) { 
        
        LoginResponseDto.initialize(this, token, userType, haveTickets, haveEvents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token, userType, haveTickets, haveEvents) { 
        obj['token'] = token;
        obj['userType'] = userType;
        obj['haveTickets'] = haveTickets;
        obj['haveEvents'] = haveEvents;
    }

    /**
     * Constructs a <code>LoginResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoginResponseDto} obj Optional instance to populate.
     * @return {module:model/LoginResponseDto} The populated <code>LoginResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoginResponseDto();

            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
            if (data.hasOwnProperty('haveTickets')) {
                obj['haveTickets'] = ApiClient.convertToType(data['haveTickets'], 'Boolean');
            }
            if (data.hasOwnProperty('haveEvents')) {
                obj['haveEvents'] = ApiClient.convertToType(data['haveEvents'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoginResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoginResponseDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoginResponseDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['userType'] && !(typeof data['userType'] === 'string' || data['userType'] instanceof String)) {
            throw new Error("Expected the field `userType` to be a primitive type in the JSON string but got " + data['userType']);
        }

        return true;
    }


}

LoginResponseDto.RequiredProperties = ["token", "userType", "haveTickets", "haveEvents"];

/**
 * @member {String} token
 */
LoginResponseDto.prototype['token'] = undefined;

/**
 * @member {module:model/LoginResponseDto.UserTypeEnum} userType
 */
LoginResponseDto.prototype['userType'] = undefined;

/**
 * @member {Boolean} haveTickets
 */
LoginResponseDto.prototype['haveTickets'] = undefined;

/**
 * @member {Boolean} haveEvents
 */
LoginResponseDto.prototype['haveEvents'] = undefined;





/**
 * Allowed values for the <code>userType</code> property.
 * @enum {String}
 * @readonly
 */
LoginResponseDto['UserTypeEnum'] = {

    /**
     * value: "PARTICIPANT"
     * @const
     */
    "PARTICIPANT": "PARTICIPANT",

    /**
     * value: "PRODUCER"
     * @const
     */
    "PRODUCER": "PRODUCER"
};



export default LoginResponseDto;

