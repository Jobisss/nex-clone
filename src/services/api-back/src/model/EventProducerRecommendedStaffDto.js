/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventProducerRecommendedStaffDtoEventsInner from './EventProducerRecommendedStaffDtoEventsInner';

/**
 * The EventProducerRecommendedStaffDto model module.
 * @module model/EventProducerRecommendedStaffDto
 * @version 1.0
 */
class EventProducerRecommendedStaffDto {
    /**
     * Constructs a new <code>EventProducerRecommendedStaffDto</code>.
     * @alias module:model/EventProducerRecommendedStaffDto
     * @param staffId {String} 
     * @param staffName {String} 
     * @param staffEmail {String} 
     * @param eventCount {Number} 
     * @param events {Array.<module:model/EventProducerRecommendedStaffDtoEventsInner>} 
     */
    constructor(staffId, staffName, staffEmail, eventCount, events) { 
        
        EventProducerRecommendedStaffDto.initialize(this, staffId, staffName, staffEmail, eventCount, events);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, staffId, staffName, staffEmail, eventCount, events) { 
        obj['staffId'] = staffId;
        obj['staffName'] = staffName;
        obj['staffEmail'] = staffEmail;
        obj['eventCount'] = eventCount;
        obj['events'] = events;
    }

    /**
     * Constructs a <code>EventProducerRecommendedStaffDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventProducerRecommendedStaffDto} obj Optional instance to populate.
     * @return {module:model/EventProducerRecommendedStaffDto} The populated <code>EventProducerRecommendedStaffDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventProducerRecommendedStaffDto();

            if (data.hasOwnProperty('staffId')) {
                obj['staffId'] = ApiClient.convertToType(data['staffId'], 'String');
            }
            if (data.hasOwnProperty('staffName')) {
                obj['staffName'] = ApiClient.convertToType(data['staffName'], 'String');
            }
            if (data.hasOwnProperty('staffEmail')) {
                obj['staffEmail'] = ApiClient.convertToType(data['staffEmail'], 'String');
            }
            if (data.hasOwnProperty('eventCount')) {
                obj['eventCount'] = ApiClient.convertToType(data['eventCount'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [EventProducerRecommendedStaffDtoEventsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventProducerRecommendedStaffDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventProducerRecommendedStaffDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventProducerRecommendedStaffDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['staffId'] && !(typeof data['staffId'] === 'string' || data['staffId'] instanceof String)) {
            throw new Error("Expected the field `staffId` to be a primitive type in the JSON string but got " + data['staffId']);
        }
        // ensure the json data is a string
        if (data['staffName'] && !(typeof data['staffName'] === 'string' || data['staffName'] instanceof String)) {
            throw new Error("Expected the field `staffName` to be a primitive type in the JSON string but got " + data['staffName']);
        }
        // ensure the json data is a string
        if (data['staffEmail'] && !(typeof data['staffEmail'] === 'string' || data['staffEmail'] instanceof String)) {
            throw new Error("Expected the field `staffEmail` to be a primitive type in the JSON string but got " + data['staffEmail']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                EventProducerRecommendedStaffDtoEventsInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventProducerRecommendedStaffDto.RequiredProperties = ["staffId", "staffName", "staffEmail", "eventCount", "events"];

/**
 * @member {String} staffId
 */
EventProducerRecommendedStaffDto.prototype['staffId'] = undefined;

/**
 * @member {String} staffName
 */
EventProducerRecommendedStaffDto.prototype['staffName'] = undefined;

/**
 * @member {String} staffEmail
 */
EventProducerRecommendedStaffDto.prototype['staffEmail'] = undefined;

/**
 * @member {Number} eventCount
 */
EventProducerRecommendedStaffDto.prototype['eventCount'] = undefined;

/**
 * @member {Array.<module:model/EventProducerRecommendedStaffDtoEventsInner>} events
 */
EventProducerRecommendedStaffDto.prototype['events'] = undefined;






export default EventProducerRecommendedStaffDto;

