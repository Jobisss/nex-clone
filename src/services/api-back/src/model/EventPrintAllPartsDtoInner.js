/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventPrintAllPartsDtoInner model module.
 * @module model/EventPrintAllPartsDtoInner
 * @version 1.0
 */
class EventPrintAllPartsDtoInner {
    /**
     * Constructs a new <code>EventPrintAllPartsDtoInner</code>.
     * @alias module:model/EventPrintAllPartsDtoInner
     * @param partId {String} 
     * @param name {String} 
     * @param ticket {String} 
     * @param qrcode {String} 
     */
    constructor(partId, name, ticket, qrcode) { 
        
        EventPrintAllPartsDtoInner.initialize(this, partId, name, ticket, qrcode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partId, name, ticket, qrcode) { 
        obj['partId'] = partId;
        obj['name'] = name;
        obj['ticket'] = ticket;
        obj['qrcode'] = qrcode;
    }

    /**
     * Constructs a <code>EventPrintAllPartsDtoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventPrintAllPartsDtoInner} obj Optional instance to populate.
     * @return {module:model/EventPrintAllPartsDtoInner} The populated <code>EventPrintAllPartsDtoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventPrintAllPartsDtoInner();

            if (data.hasOwnProperty('partId')) {
                obj['partId'] = ApiClient.convertToType(data['partId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ticket')) {
                obj['ticket'] = ApiClient.convertToType(data['ticket'], 'String');
            }
            if (data.hasOwnProperty('qrcode')) {
                obj['qrcode'] = ApiClient.convertToType(data['qrcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventPrintAllPartsDtoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventPrintAllPartsDtoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventPrintAllPartsDtoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['partId'] && !(typeof data['partId'] === 'string' || data['partId'] instanceof String)) {
            throw new Error("Expected the field `partId` to be a primitive type in the JSON string but got " + data['partId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ticket'] && !(typeof data['ticket'] === 'string' || data['ticket'] instanceof String)) {
            throw new Error("Expected the field `ticket` to be a primitive type in the JSON string but got " + data['ticket']);
        }
        // ensure the json data is a string
        if (data['qrcode'] && !(typeof data['qrcode'] === 'string' || data['qrcode'] instanceof String)) {
            throw new Error("Expected the field `qrcode` to be a primitive type in the JSON string but got " + data['qrcode']);
        }

        return true;
    }


}

EventPrintAllPartsDtoInner.RequiredProperties = ["partId", "name", "ticket", "qrcode"];

/**
 * @member {String} partId
 */
EventPrintAllPartsDtoInner.prototype['partId'] = undefined;

/**
 * @member {String} name
 */
EventPrintAllPartsDtoInner.prototype['name'] = undefined;

/**
 * @member {String} ticket
 */
EventPrintAllPartsDtoInner.prototype['ticket'] = undefined;

/**
 * @member {String} qrcode
 */
EventPrintAllPartsDtoInner.prototype['qrcode'] = undefined;






export default EventPrintAllPartsDtoInner;

