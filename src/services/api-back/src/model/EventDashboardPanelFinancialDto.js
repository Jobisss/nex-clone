/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventDashboardPanelFinancialDtoSellDiaryByTicketInner from './EventDashboardPanelFinancialDtoSellDiaryByTicketInner';
import EventDashboardResponseDtoSellDiaryInner from './EventDashboardResponseDtoSellDiaryInner';

/**
 * The EventDashboardPanelFinancialDto model module.
 * @module model/EventDashboardPanelFinancialDto
 * @version 1.0
 */
class EventDashboardPanelFinancialDto {
    /**
     * Constructs a new <code>EventDashboardPanelFinancialDto</code>.
     * @alias module:model/EventDashboardPanelFinancialDto
     * @param eventTotal {Number} 
     * @param eventTotalDrawee {Number} 
     * @param totalDisponible {Number} 
     * @param currency {String} 
     * @param sellDiary {Array.<module:model/EventDashboardResponseDtoSellDiaryInner>} 
     * @param sellDiaryByTicket {Array.<module:model/EventDashboardPanelFinancialDtoSellDiaryByTicketInner>} 
     */
    constructor(eventTotal, eventTotalDrawee, totalDisponible, currency, sellDiary, sellDiaryByTicket) { 
        
        EventDashboardPanelFinancialDto.initialize(this, eventTotal, eventTotalDrawee, totalDisponible, currency, sellDiary, sellDiaryByTicket);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventTotal, eventTotalDrawee, totalDisponible, currency, sellDiary, sellDiaryByTicket) { 
        obj['eventTotal'] = eventTotal;
        obj['eventTotalDrawee'] = eventTotalDrawee;
        obj['totalDisponible'] = totalDisponible;
        obj['currency'] = currency;
        obj['sellDiary'] = sellDiary;
        obj['sellDiaryByTicket'] = sellDiaryByTicket;
    }

    /**
     * Constructs a <code>EventDashboardPanelFinancialDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDashboardPanelFinancialDto} obj Optional instance to populate.
     * @return {module:model/EventDashboardPanelFinancialDto} The populated <code>EventDashboardPanelFinancialDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDashboardPanelFinancialDto();

            if (data.hasOwnProperty('eventTotal')) {
                obj['eventTotal'] = ApiClient.convertToType(data['eventTotal'], 'Number');
            }
            if (data.hasOwnProperty('eventTotalDrawee')) {
                obj['eventTotalDrawee'] = ApiClient.convertToType(data['eventTotalDrawee'], 'Number');
            }
            if (data.hasOwnProperty('totalDisponible')) {
                obj['totalDisponible'] = ApiClient.convertToType(data['totalDisponible'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('sellDiary')) {
                obj['sellDiary'] = ApiClient.convertToType(data['sellDiary'], [EventDashboardResponseDtoSellDiaryInner]);
            }
            if (data.hasOwnProperty('sellDiaryByTicket')) {
                obj['sellDiaryByTicket'] = ApiClient.convertToType(data['sellDiaryByTicket'], [EventDashboardPanelFinancialDtoSellDiaryByTicketInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDashboardPanelFinancialDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDashboardPanelFinancialDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventDashboardPanelFinancialDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['sellDiary']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellDiary'])) {
                throw new Error("Expected the field `sellDiary` to be an array in the JSON data but got " + data['sellDiary']);
            }
            // validate the optional field `sellDiary` (array)
            for (const item of data['sellDiary']) {
                EventDashboardResponseDtoSellDiaryInner.validateJSON(item);
            };
        }
        if (data['sellDiaryByTicket']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellDiaryByTicket'])) {
                throw new Error("Expected the field `sellDiaryByTicket` to be an array in the JSON data but got " + data['sellDiaryByTicket']);
            }
            // validate the optional field `sellDiaryByTicket` (array)
            for (const item of data['sellDiaryByTicket']) {
                EventDashboardPanelFinancialDtoSellDiaryByTicketInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventDashboardPanelFinancialDto.RequiredProperties = ["eventTotal", "eventTotalDrawee", "totalDisponible", "currency", "sellDiary", "sellDiaryByTicket"];

/**
 * @member {Number} eventTotal
 */
EventDashboardPanelFinancialDto.prototype['eventTotal'] = undefined;

/**
 * @member {Number} eventTotalDrawee
 */
EventDashboardPanelFinancialDto.prototype['eventTotalDrawee'] = undefined;

/**
 * @member {Number} totalDisponible
 */
EventDashboardPanelFinancialDto.prototype['totalDisponible'] = undefined;

/**
 * @member {String} currency
 */
EventDashboardPanelFinancialDto.prototype['currency'] = undefined;

/**
 * @member {Array.<module:model/EventDashboardResponseDtoSellDiaryInner>} sellDiary
 */
EventDashboardPanelFinancialDto.prototype['sellDiary'] = undefined;

/**
 * @member {Array.<module:model/EventDashboardPanelFinancialDtoSellDiaryByTicketInner>} sellDiaryByTicket
 */
EventDashboardPanelFinancialDto.prototype['sellDiaryByTicket'] = undefined;






export default EventDashboardPanelFinancialDto;

