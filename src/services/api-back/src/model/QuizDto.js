/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuizDtoQuestionsInner from './QuizDtoQuestionsInner';

/**
 * The QuizDto model module.
 * @module model/QuizDto
 * @version 1.0
 */
class QuizDto {
    /**
     * Constructs a new <code>QuizDto</code>.
     * @alias module:model/QuizDto
     * @param quizId {String} 
     * @param title {String} 
     * @param startAt {Object} 
     * @param endAt {Object} 
     * @param status {module:model/QuizDto.StatusEnum} 
     * @param anonimousResponse {Boolean} 
     * @param questions {Array.<module:model/QuizDtoQuestionsInner>} 
     */
    constructor(quizId, title, startAt, endAt, status, anonimousResponse, questions) { 
        
        QuizDto.initialize(this, quizId, title, startAt, endAt, status, anonimousResponse, questions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quizId, title, startAt, endAt, status, anonimousResponse, questions) { 
        obj['quizId'] = quizId;
        obj['title'] = title;
        obj['startAt'] = startAt;
        obj['endAt'] = endAt;
        obj['status'] = status;
        obj['anonimousResponse'] = anonimousResponse;
        obj['questions'] = questions;
    }

    /**
     * Constructs a <code>QuizDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuizDto} obj Optional instance to populate.
     * @return {module:model/QuizDto} The populated <code>QuizDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuizDto();

            if (data.hasOwnProperty('quizId')) {
                obj['quizId'] = ApiClient.convertToType(data['quizId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], Object);
            }
            if (data.hasOwnProperty('endAt')) {
                obj['endAt'] = ApiClient.convertToType(data['endAt'], Object);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('anonimousResponse')) {
                obj['anonimousResponse'] = ApiClient.convertToType(data['anonimousResponse'], 'Boolean');
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], [QuizDtoQuestionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuizDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuizDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuizDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['quizId'] && !(typeof data['quizId'] === 'string' || data['quizId'] instanceof String)) {
            throw new Error("Expected the field `quizId` to be a primitive type in the JSON string but got " + data['quizId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['questions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questions'])) {
                throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
            }
            // validate the optional field `questions` (array)
            for (const item of data['questions']) {
                QuizDtoQuestionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

QuizDto.RequiredProperties = ["quizId", "title", "startAt", "endAt", "status", "anonimousResponse", "questions"];

/**
 * @member {String} quizId
 */
QuizDto.prototype['quizId'] = undefined;

/**
 * @member {String} title
 */
QuizDto.prototype['title'] = undefined;

/**
 * @member {Object} startAt
 */
QuizDto.prototype['startAt'] = undefined;

/**
 * @member {Object} endAt
 */
QuizDto.prototype['endAt'] = undefined;

/**
 * @member {module:model/QuizDto.StatusEnum} status
 */
QuizDto.prototype['status'] = undefined;

/**
 * @member {Boolean} anonimousResponse
 */
QuizDto.prototype['anonimousResponse'] = undefined;

/**
 * @member {Array.<module:model/QuizDtoQuestionsInner>} questions
 */
QuizDto.prototype['questions'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
QuizDto['StatusEnum'] = {

    /**
     * value: "ENABLE"
     * @const
     */
    "ENABLE": "ENABLE",

    /**
     * value: "DISABLE"
     * @const
     */
    "DISABLE": "DISABLE"
};



export default QuizDto;

