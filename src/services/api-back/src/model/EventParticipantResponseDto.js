/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventParticipantResponseDtoQuestionsResponsesInner from './EventParticipantResponseDtoQuestionsResponsesInner';

/**
 * The EventParticipantResponseDto model module.
 * @module model/EventParticipantResponseDto
 * @version 1.0
 */
class EventParticipantResponseDto {
    /**
     * Constructs a new <code>EventParticipantResponseDto</code>.
     * @alias module:model/EventParticipantResponseDto
     * @param quizParticipantId {String} 
     * @param quizTitle {String} 
     * @param participantName {String} 
     * @param participantEmail {String} 
     * @param questionsResponses {Array.<module:model/EventParticipantResponseDtoQuestionsResponsesInner>} 
     */
    constructor(quizParticipantId, quizTitle, participantName, participantEmail, questionsResponses) { 
        
        EventParticipantResponseDto.initialize(this, quizParticipantId, quizTitle, participantName, participantEmail, questionsResponses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quizParticipantId, quizTitle, participantName, participantEmail, questionsResponses) { 
        obj['quizParticipantId'] = quizParticipantId;
        obj['quizTitle'] = quizTitle;
        obj['participantName'] = participantName;
        obj['participantEmail'] = participantEmail;
        obj['questionsResponses'] = questionsResponses;
    }

    /**
     * Constructs a <code>EventParticipantResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventParticipantResponseDto} obj Optional instance to populate.
     * @return {module:model/EventParticipantResponseDto} The populated <code>EventParticipantResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventParticipantResponseDto();

            if (data.hasOwnProperty('quizParticipantId')) {
                obj['quizParticipantId'] = ApiClient.convertToType(data['quizParticipantId'], 'String');
            }
            if (data.hasOwnProperty('quizTitle')) {
                obj['quizTitle'] = ApiClient.convertToType(data['quizTitle'], 'String');
            }
            if (data.hasOwnProperty('participantName')) {
                obj['participantName'] = ApiClient.convertToType(data['participantName'], 'String');
            }
            if (data.hasOwnProperty('participantEmail')) {
                obj['participantEmail'] = ApiClient.convertToType(data['participantEmail'], 'String');
            }
            if (data.hasOwnProperty('questionsResponses')) {
                obj['questionsResponses'] = ApiClient.convertToType(data['questionsResponses'], [EventParticipantResponseDtoQuestionsResponsesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventParticipantResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventParticipantResponseDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventParticipantResponseDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['quizParticipantId'] && !(typeof data['quizParticipantId'] === 'string' || data['quizParticipantId'] instanceof String)) {
            throw new Error("Expected the field `quizParticipantId` to be a primitive type in the JSON string but got " + data['quizParticipantId']);
        }
        // ensure the json data is a string
        if (data['quizTitle'] && !(typeof data['quizTitle'] === 'string' || data['quizTitle'] instanceof String)) {
            throw new Error("Expected the field `quizTitle` to be a primitive type in the JSON string but got " + data['quizTitle']);
        }
        // ensure the json data is a string
        if (data['participantName'] && !(typeof data['participantName'] === 'string' || data['participantName'] instanceof String)) {
            throw new Error("Expected the field `participantName` to be a primitive type in the JSON string but got " + data['participantName']);
        }
        // ensure the json data is a string
        if (data['participantEmail'] && !(typeof data['participantEmail'] === 'string' || data['participantEmail'] instanceof String)) {
            throw new Error("Expected the field `participantEmail` to be a primitive type in the JSON string but got " + data['participantEmail']);
        }
        if (data['questionsResponses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questionsResponses'])) {
                throw new Error("Expected the field `questionsResponses` to be an array in the JSON data but got " + data['questionsResponses']);
            }
            // validate the optional field `questionsResponses` (array)
            for (const item of data['questionsResponses']) {
                EventParticipantResponseDtoQuestionsResponsesInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventParticipantResponseDto.RequiredProperties = ["quizParticipantId", "quizTitle", "participantName", "participantEmail", "questionsResponses"];

/**
 * @member {String} quizParticipantId
 */
EventParticipantResponseDto.prototype['quizParticipantId'] = undefined;

/**
 * @member {String} quizTitle
 */
EventParticipantResponseDto.prototype['quizTitle'] = undefined;

/**
 * @member {String} participantName
 */
EventParticipantResponseDto.prototype['participantName'] = undefined;

/**
 * @member {String} participantEmail
 */
EventParticipantResponseDto.prototype['participantEmail'] = undefined;

/**
 * @member {Array.<module:model/EventParticipantResponseDtoQuestionsResponsesInner>} questionsResponses
 */
EventParticipantResponseDto.prototype['questionsResponses'] = undefined;






export default EventParticipantResponseDto;

