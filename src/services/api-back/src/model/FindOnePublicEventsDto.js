/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FindOnePublicEventsDtoConfig from './FindOnePublicEventsDtoConfig';
import FindOnePublicEventsDtoTerm from './FindOnePublicEventsDtoTerm';
import FindOnePublicEventsDtoTicketInner from './FindOnePublicEventsDtoTicketInner';

/**
 * The FindOnePublicEventsDto model module.
 * @module model/FindOnePublicEventsDto
 * @version 1.0
 */
class FindOnePublicEventsDto {
    /**
     * Constructs a new <code>FindOnePublicEventsDto</code>.
     * @alias module:model/FindOnePublicEventsDto
     * @param id {String} 
     * @param title {String} 
     * @param slug {String} 
     * @param photo {String} 
     * @param category {String} 
     * @param description {String} 
     * @param startAt {Object} 
     * @param endAt {Object} 
     * @param location {module:model/FindOnePublicEventsDto.LocationEnum} 
     * @param latitude {String} 
     * @param longitude {String} 
     * @param state {String} 
     * @param city {String} 
     * @param address {String} 
     * @param complement {String} 
     * @param country {String} 
     * @param number {String} 
     * @param district {String} 
     * @param ticket {Array.<module:model/FindOnePublicEventsDtoTicketInner>} 
     * @param config {module:model/FindOnePublicEventsDtoConfig} 
     * @param term {module:model/FindOnePublicEventsDtoTerm} 
     */
    constructor(id, title, slug, photo, category, description, startAt, endAt, location, latitude, longitude, state, city, address, complement, country, number, district, ticket, config, term) { 
        
        FindOnePublicEventsDto.initialize(this, id, title, slug, photo, category, description, startAt, endAt, location, latitude, longitude, state, city, address, complement, country, number, district, ticket, config, term);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, slug, photo, category, description, startAt, endAt, location, latitude, longitude, state, city, address, complement, country, number, district, ticket, config, term) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['slug'] = slug;
        obj['photo'] = photo;
        obj['category'] = category;
        obj['description'] = description;
        obj['startAt'] = startAt;
        obj['endAt'] = endAt;
        obj['location'] = location;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
        obj['state'] = state;
        obj['city'] = city;
        obj['address'] = address;
        obj['complement'] = complement;
        obj['country'] = country;
        obj['number'] = number;
        obj['district'] = district;
        obj['ticket'] = ticket;
        obj['config'] = config;
        obj['term'] = term;
    }

    /**
     * Constructs a <code>FindOnePublicEventsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindOnePublicEventsDto} obj Optional instance to populate.
     * @return {module:model/FindOnePublicEventsDto} The populated <code>FindOnePublicEventsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindOnePublicEventsDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], Object);
            }
            if (data.hasOwnProperty('endAt')) {
                obj['endAt'] = ApiClient.convertToType(data['endAt'], Object);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('ticket')) {
                obj['ticket'] = ApiClient.convertToType(data['ticket'], [FindOnePublicEventsDtoTicketInner]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = FindOnePublicEventsDtoConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = FindOnePublicEventsDtoTerm.constructFromObject(data['term']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindOnePublicEventsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindOnePublicEventsDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindOnePublicEventsDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['photo'] && !(typeof data['photo'] === 'string' || data['photo'] instanceof String)) {
            throw new Error("Expected the field `photo` to be a primitive type in the JSON string but got " + data['photo']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        if (data['ticket']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ticket'])) {
                throw new Error("Expected the field `ticket` to be an array in the JSON data but got " + data['ticket']);
            }
            // validate the optional field `ticket` (array)
            for (const item of data['ticket']) {
                FindOnePublicEventsDtoTicketInner.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          FindOnePublicEventsDtoConfig.validateJSON(data['config']);
        }
        // validate the optional field `term`
        if (data['term']) { // data not null
          FindOnePublicEventsDtoTerm.validateJSON(data['term']);
        }

        return true;
    }


}

FindOnePublicEventsDto.RequiredProperties = ["id", "title", "slug", "photo", "category", "description", "startAt", "endAt", "location", "latitude", "longitude", "state", "city", "address", "complement", "country", "number", "district", "ticket", "config", "term"];

/**
 * @member {String} id
 */
FindOnePublicEventsDto.prototype['id'] = undefined;

/**
 * @member {String} title
 */
FindOnePublicEventsDto.prototype['title'] = undefined;

/**
 * @member {String} slug
 */
FindOnePublicEventsDto.prototype['slug'] = undefined;

/**
 * @member {String} photo
 */
FindOnePublicEventsDto.prototype['photo'] = undefined;

/**
 * @member {String} category
 */
FindOnePublicEventsDto.prototype['category'] = undefined;

/**
 * @member {String} description
 */
FindOnePublicEventsDto.prototype['description'] = undefined;

/**
 * @member {Object} startAt
 */
FindOnePublicEventsDto.prototype['startAt'] = undefined;

/**
 * @member {Object} endAt
 */
FindOnePublicEventsDto.prototype['endAt'] = undefined;

/**
 * @member {module:model/FindOnePublicEventsDto.LocationEnum} location
 */
FindOnePublicEventsDto.prototype['location'] = undefined;

/**
 * @member {String} latitude
 */
FindOnePublicEventsDto.prototype['latitude'] = undefined;

/**
 * @member {String} longitude
 */
FindOnePublicEventsDto.prototype['longitude'] = undefined;

/**
 * @member {String} state
 */
FindOnePublicEventsDto.prototype['state'] = undefined;

/**
 * @member {String} city
 */
FindOnePublicEventsDto.prototype['city'] = undefined;

/**
 * @member {String} address
 */
FindOnePublicEventsDto.prototype['address'] = undefined;

/**
 * @member {String} complement
 */
FindOnePublicEventsDto.prototype['complement'] = undefined;

/**
 * @member {String} country
 */
FindOnePublicEventsDto.prototype['country'] = undefined;

/**
 * @member {String} number
 */
FindOnePublicEventsDto.prototype['number'] = undefined;

/**
 * @member {String} district
 */
FindOnePublicEventsDto.prototype['district'] = undefined;

/**
 * @member {Array.<module:model/FindOnePublicEventsDtoTicketInner>} ticket
 */
FindOnePublicEventsDto.prototype['ticket'] = undefined;

/**
 * @member {module:model/FindOnePublicEventsDtoConfig} config
 */
FindOnePublicEventsDto.prototype['config'] = undefined;

/**
 * @member {module:model/FindOnePublicEventsDtoTerm} term
 */
FindOnePublicEventsDto.prototype['term'] = undefined;





/**
 * Allowed values for the <code>location</code> property.
 * @enum {String}
 * @readonly
 */
FindOnePublicEventsDto['LocationEnum'] = {

    /**
     * value: "ONLINE"
     * @const
     */
    "ONLINE": "ONLINE",

    /**
     * value: "UNDEFINED"
     * @const
     */
    "UNDEFINED": "UNDEFINED",

    /**
     * value: "DEFINED"
     * @const
     */
    "DEFINED": "DEFINED"
};



export default FindOnePublicEventsDto;

