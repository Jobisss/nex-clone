/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserProducerResponseDtoEventsInner from './UserProducerResponseDtoEventsInner';

/**
 * The UserProducerResponseDto model module.
 * @module model/UserProducerResponseDto
 * @version 1.0
 */
class UserProducerResponseDto {
    /**
     * Constructs a new <code>UserProducerResponseDto</code>.
     * @alias module:model/UserProducerResponseDto
     * @param id {String} 
     * @param name {String} 
     * @param email {String} 
     * @param dateBirth {String} 
     * @param document {String} 
     * @param phoneCountry {String} 
     * @param phoneNumber {String} 
     * @param profilePhoto {String} 
     * @param street {String} 
     * @param district {String} 
     * @param state {String} 
     * @param city {String} 
     * @param country {String} 
     * @param number {String} 
     * @param complement {String} 
     * @param cep {String} 
     * @param createdAt {Object} 
     * @param events {Array.<module:model/UserProducerResponseDtoEventsInner>} 
     */
    constructor(id, name, email, dateBirth, document, phoneCountry, phoneNumber, profilePhoto, street, district, state, city, country, number, complement, cep, createdAt, events) { 
        
        UserProducerResponseDto.initialize(this, id, name, email, dateBirth, document, phoneCountry, phoneNumber, profilePhoto, street, district, state, city, country, number, complement, cep, createdAt, events);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, email, dateBirth, document, phoneCountry, phoneNumber, profilePhoto, street, district, state, city, country, number, complement, cep, createdAt, events) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['email'] = email;
        obj['dateBirth'] = dateBirth;
        obj['document'] = document;
        obj['phoneCountry'] = phoneCountry;
        obj['phoneNumber'] = phoneNumber;
        obj['profilePhoto'] = profilePhoto;
        obj['street'] = street;
        obj['district'] = district;
        obj['state'] = state;
        obj['city'] = city;
        obj['country'] = country;
        obj['number'] = number;
        obj['complement'] = complement;
        obj['cep'] = cep;
        obj['createdAt'] = createdAt;
        obj['events'] = events;
    }

    /**
     * Constructs a <code>UserProducerResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserProducerResponseDto} obj Optional instance to populate.
     * @return {module:model/UserProducerResponseDto} The populated <code>UserProducerResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserProducerResponseDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('dateBirth')) {
                obj['dateBirth'] = ApiClient.convertToType(data['dateBirth'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('phoneCountry')) {
                obj['phoneCountry'] = ApiClient.convertToType(data['phoneCountry'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('profilePhoto')) {
                obj['profilePhoto'] = ApiClient.convertToType(data['profilePhoto'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('cep')) {
                obj['cep'] = ApiClient.convertToType(data['cep'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], Object);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [UserProducerResponseDtoEventsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserProducerResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserProducerResponseDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserProducerResponseDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['dateBirth'] && !(typeof data['dateBirth'] === 'string' || data['dateBirth'] instanceof String)) {
            throw new Error("Expected the field `dateBirth` to be a primitive type in the JSON string but got " + data['dateBirth']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['phoneCountry'] && !(typeof data['phoneCountry'] === 'string' || data['phoneCountry'] instanceof String)) {
            throw new Error("Expected the field `phoneCountry` to be a primitive type in the JSON string but got " + data['phoneCountry']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['profilePhoto'] && !(typeof data['profilePhoto'] === 'string' || data['profilePhoto'] instanceof String)) {
            throw new Error("Expected the field `profilePhoto` to be a primitive type in the JSON string but got " + data['profilePhoto']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // ensure the json data is a string
        if (data['cep'] && !(typeof data['cep'] === 'string' || data['cep'] instanceof String)) {
            throw new Error("Expected the field `cep` to be a primitive type in the JSON string but got " + data['cep']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                UserProducerResponseDtoEventsInner.validateJSON(item);
            };
        }

        return true;
    }


}

UserProducerResponseDto.RequiredProperties = ["id", "name", "email", "dateBirth", "document", "phoneCountry", "phoneNumber", "profilePhoto", "street", "district", "state", "city", "country", "number", "complement", "cep", "createdAt", "events"];

/**
 * @member {String} id
 */
UserProducerResponseDto.prototype['id'] = undefined;

/**
 * @member {String} name
 */
UserProducerResponseDto.prototype['name'] = undefined;

/**
 * @member {String} email
 */
UserProducerResponseDto.prototype['email'] = undefined;

/**
 * @member {String} dateBirth
 */
UserProducerResponseDto.prototype['dateBirth'] = undefined;

/**
 * @member {String} document
 */
UserProducerResponseDto.prototype['document'] = undefined;

/**
 * @member {String} phoneCountry
 */
UserProducerResponseDto.prototype['phoneCountry'] = undefined;

/**
 * @member {String} phoneNumber
 */
UserProducerResponseDto.prototype['phoneNumber'] = undefined;

/**
 * @member {String} profilePhoto
 */
UserProducerResponseDto.prototype['profilePhoto'] = undefined;

/**
 * @member {String} street
 */
UserProducerResponseDto.prototype['street'] = undefined;

/**
 * @member {String} district
 */
UserProducerResponseDto.prototype['district'] = undefined;

/**
 * @member {String} state
 */
UserProducerResponseDto.prototype['state'] = undefined;

/**
 * @member {String} city
 */
UserProducerResponseDto.prototype['city'] = undefined;

/**
 * @member {String} country
 */
UserProducerResponseDto.prototype['country'] = undefined;

/**
 * @member {String} number
 */
UserProducerResponseDto.prototype['number'] = undefined;

/**
 * @member {String} complement
 */
UserProducerResponseDto.prototype['complement'] = undefined;

/**
 * @member {String} cep
 */
UserProducerResponseDto.prototype['cep'] = undefined;

/**
 * @member {Object} createdAt
 */
UserProducerResponseDto.prototype['createdAt'] = undefined;

/**
 * @member {Array.<module:model/UserProducerResponseDtoEventsInner>} events
 */
UserProducerResponseDto.prototype['events'] = undefined;






export default UserProducerResponseDto;

