/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTicketCouponsDtoEventTicketsIdInner from './EventTicketCouponsDtoEventTicketsIdInner';

/**
 * The EventTicketCouponsDto model module.
 * @module model/EventTicketCouponsDto
 * @version 1.0
 */
class EventTicketCouponsDto {
    /**
     * Constructs a new <code>EventTicketCouponsDto</code>.
     * @alias module:model/EventTicketCouponsDto
     * @param code {String} 
     * @param name {String} 
     * @param expireAt {String} 
     * @param eventTicketsId {Array.<module:model/EventTicketCouponsDtoEventTicketsIdInner>} 
     * @param percentOff {Number} 
     */
    constructor(code, name, expireAt, eventTicketsId, percentOff) { 
        
        EventTicketCouponsDto.initialize(this, code, name, expireAt, eventTicketsId, percentOff);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, name, expireAt, eventTicketsId, percentOff) { 
        obj['code'] = code;
        obj['name'] = name;
        obj['expireAt'] = expireAt;
        obj['eventTicketsId'] = eventTicketsId;
        obj['percentOff'] = percentOff;
    }

    /**
     * Constructs a <code>EventTicketCouponsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketCouponsDto} obj Optional instance to populate.
     * @return {module:model/EventTicketCouponsDto} The populated <code>EventTicketCouponsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketCouponsDto();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'String');
            }
            if (data.hasOwnProperty('eventTicketsId')) {
                obj['eventTicketsId'] = ApiClient.convertToType(data['eventTicketsId'], [EventTicketCouponsDtoEventTicketsIdInner]);
            }
            if (data.hasOwnProperty('percentOff')) {
                obj['percentOff'] = ApiClient.convertToType(data['percentOff'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketCouponsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketCouponsDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketCouponsDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['expireAt'] && !(typeof data['expireAt'] === 'string' || data['expireAt'] instanceof String)) {
            throw new Error("Expected the field `expireAt` to be a primitive type in the JSON string but got " + data['expireAt']);
        }
        if (data['eventTicketsId']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventTicketsId'])) {
                throw new Error("Expected the field `eventTicketsId` to be an array in the JSON data but got " + data['eventTicketsId']);
            }
            // validate the optional field `eventTicketsId` (array)
            for (const item of data['eventTicketsId']) {
                EventTicketCouponsDtoEventTicketsIdInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventTicketCouponsDto.RequiredProperties = ["code", "name", "expireAt", "eventTicketsId", "percentOff"];

/**
 * @member {String} code
 */
EventTicketCouponsDto.prototype['code'] = undefined;

/**
 * @member {String} name
 */
EventTicketCouponsDto.prototype['name'] = undefined;

/**
 * @member {String} expireAt
 */
EventTicketCouponsDto.prototype['expireAt'] = undefined;

/**
 * @member {Array.<module:model/EventTicketCouponsDtoEventTicketsIdInner>} eventTicketsId
 */
EventTicketCouponsDto.prototype['eventTicketsId'] = undefined;

/**
 * @member {Number} percentOff
 */
EventTicketCouponsDto.prototype['percentOff'] = undefined;






export default EventTicketCouponsDto;

