/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTicketInfoDtoTicketsInnerTicketGiftsInner from './EventTicketInfoDtoTicketsInnerTicketGiftsInner';

/**
 * The EventTicketInfoDtoTicketsInner model module.
 * @module model/EventTicketInfoDtoTicketsInner
 * @version 1.0
 */
class EventTicketInfoDtoTicketsInner {
    /**
     * Constructs a new <code>EventTicketInfoDtoTicketsInner</code>.
     * @alias module:model/EventTicketInfoDtoTicketsInner
     * @param ticketGifts {Array.<module:model/EventTicketInfoDtoTicketsInnerTicketGiftsInner>} 
     */
    constructor(ticketGifts) { 
        
        EventTicketInfoDtoTicketsInner.initialize(this, ticketGifts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ticketGifts) { 
        obj['ticketGifts'] = ticketGifts;
    }

    /**
     * Constructs a <code>EventTicketInfoDtoTicketsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketInfoDtoTicketsInner} obj Optional instance to populate.
     * @return {module:model/EventTicketInfoDtoTicketsInner} The populated <code>EventTicketInfoDtoTicketsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketInfoDtoTicketsInner();

            if (data.hasOwnProperty('eventParticipantId')) {
                obj['eventParticipantId'] = ApiClient.convertToType(data['eventParticipantId'], 'String');
            }
            if (data.hasOwnProperty('eventParticipantQrcode')) {
                obj['eventParticipantQrcode'] = ApiClient.convertToType(data['eventParticipantQrcode'], 'String');
            }
            if (data.hasOwnProperty('eventParticipantDocument')) {
                obj['eventParticipantDocument'] = ApiClient.convertToType(data['eventParticipantDocument'], 'String');
            }
            if (data.hasOwnProperty('eventParticipantName')) {
                obj['eventParticipantName'] = ApiClient.convertToType(data['eventParticipantName'], 'String');
            }
            if (data.hasOwnProperty('eventTicketTitle')) {
                obj['eventTicketTitle'] = ApiClient.convertToType(data['eventTicketTitle'], 'String');
            }
            if (data.hasOwnProperty('ticketGifts')) {
                obj['ticketGifts'] = ApiClient.convertToType(data['ticketGifts'], [EventTicketInfoDtoTicketsInnerTicketGiftsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketInfoDtoTicketsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketInfoDtoTicketsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketInfoDtoTicketsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventParticipantId'] && !(typeof data['eventParticipantId'] === 'string' || data['eventParticipantId'] instanceof String)) {
            throw new Error("Expected the field `eventParticipantId` to be a primitive type in the JSON string but got " + data['eventParticipantId']);
        }
        // ensure the json data is a string
        if (data['eventParticipantQrcode'] && !(typeof data['eventParticipantQrcode'] === 'string' || data['eventParticipantQrcode'] instanceof String)) {
            throw new Error("Expected the field `eventParticipantQrcode` to be a primitive type in the JSON string but got " + data['eventParticipantQrcode']);
        }
        // ensure the json data is a string
        if (data['eventParticipantDocument'] && !(typeof data['eventParticipantDocument'] === 'string' || data['eventParticipantDocument'] instanceof String)) {
            throw new Error("Expected the field `eventParticipantDocument` to be a primitive type in the JSON string but got " + data['eventParticipantDocument']);
        }
        // ensure the json data is a string
        if (data['eventParticipantName'] && !(typeof data['eventParticipantName'] === 'string' || data['eventParticipantName'] instanceof String)) {
            throw new Error("Expected the field `eventParticipantName` to be a primitive type in the JSON string but got " + data['eventParticipantName']);
        }
        // ensure the json data is a string
        if (data['eventTicketTitle'] && !(typeof data['eventTicketTitle'] === 'string' || data['eventTicketTitle'] instanceof String)) {
            throw new Error("Expected the field `eventTicketTitle` to be a primitive type in the JSON string but got " + data['eventTicketTitle']);
        }
        if (data['ticketGifts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ticketGifts'])) {
                throw new Error("Expected the field `ticketGifts` to be an array in the JSON data but got " + data['ticketGifts']);
            }
            // validate the optional field `ticketGifts` (array)
            for (const item of data['ticketGifts']) {
                EventTicketInfoDtoTicketsInnerTicketGiftsInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventTicketInfoDtoTicketsInner.RequiredProperties = ["ticketGifts"];

/**
 * @member {String} eventParticipantId
 */
EventTicketInfoDtoTicketsInner.prototype['eventParticipantId'] = undefined;

/**
 * @member {String} eventParticipantQrcode
 */
EventTicketInfoDtoTicketsInner.prototype['eventParticipantQrcode'] = undefined;

/**
 * @member {String} eventParticipantDocument
 */
EventTicketInfoDtoTicketsInner.prototype['eventParticipantDocument'] = undefined;

/**
 * @member {String} eventParticipantName
 */
EventTicketInfoDtoTicketsInner.prototype['eventParticipantName'] = undefined;

/**
 * @member {String} eventTicketTitle
 */
EventTicketInfoDtoTicketsInner.prototype['eventTicketTitle'] = undefined;

/**
 * @member {Array.<module:model/EventTicketInfoDtoTicketsInnerTicketGiftsInner>} ticketGifts
 */
EventTicketInfoDtoTicketsInner.prototype['ticketGifts'] = undefined;






export default EventTicketInfoDtoTicketsInner;

