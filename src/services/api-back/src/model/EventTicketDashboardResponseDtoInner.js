/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTicketDashboardResponseDtoInnerTicketBatchInner from './EventTicketDashboardResponseDtoInnerTicketBatchInner';

/**
 * The EventTicketDashboardResponseDtoInner model module.
 * @module model/EventTicketDashboardResponseDtoInner
 * @version 1.0
 */
class EventTicketDashboardResponseDtoInner {
    /**
     * Constructs a new <code>EventTicketDashboardResponseDtoInner</code>.
     * @alias module:model/EventTicketDashboardResponseDtoInner
     * @param id {String} 
     * @param title {String} 
     * @param status {module:model/EventTicketDashboardResponseDtoInner.StatusEnum} 
     * @param price {Number} 
     * @param priceLiquid {Number} 
     * @param participantsCount {Number} 
     * @param ticketLimit {Number} 
     * @param ticketPercentualSell {Number} 
     * @param isBonus {Boolean} 
     * @param ticketBatch {Array.<module:model/EventTicketDashboardResponseDtoInnerTicketBatchInner>} 
     */
    constructor(id, title, status, price, priceLiquid, participantsCount, ticketLimit, ticketPercentualSell, isBonus, ticketBatch) { 
        
        EventTicketDashboardResponseDtoInner.initialize(this, id, title, status, price, priceLiquid, participantsCount, ticketLimit, ticketPercentualSell, isBonus, ticketBatch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, status, price, priceLiquid, participantsCount, ticketLimit, ticketPercentualSell, isBonus, ticketBatch) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['status'] = status;
        obj['price'] = price;
        obj['priceLiquid'] = priceLiquid;
        obj['participantsCount'] = participantsCount;
        obj['ticketLimit'] = ticketLimit;
        obj['ticketPercentualSell'] = ticketPercentualSell;
        obj['isBonus'] = isBonus;
        obj['ticketBatch'] = ticketBatch;
    }

    /**
     * Constructs a <code>EventTicketDashboardResponseDtoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTicketDashboardResponseDtoInner} obj Optional instance to populate.
     * @return {module:model/EventTicketDashboardResponseDtoInner} The populated <code>EventTicketDashboardResponseDtoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTicketDashboardResponseDtoInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('priceLiquid')) {
                obj['priceLiquid'] = ApiClient.convertToType(data['priceLiquid'], 'Number');
            }
            if (data.hasOwnProperty('participantsCount')) {
                obj['participantsCount'] = ApiClient.convertToType(data['participantsCount'], 'Number');
            }
            if (data.hasOwnProperty('ticketLimit')) {
                obj['ticketLimit'] = ApiClient.convertToType(data['ticketLimit'], 'Number');
            }
            if (data.hasOwnProperty('ticketPercentualSell')) {
                obj['ticketPercentualSell'] = ApiClient.convertToType(data['ticketPercentualSell'], 'Number');
            }
            if (data.hasOwnProperty('isBonus')) {
                obj['isBonus'] = ApiClient.convertToType(data['isBonus'], 'Boolean');
            }
            if (data.hasOwnProperty('ticketBatch')) {
                obj['ticketBatch'] = ApiClient.convertToType(data['ticketBatch'], [EventTicketDashboardResponseDtoInnerTicketBatchInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTicketDashboardResponseDtoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTicketDashboardResponseDtoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventTicketDashboardResponseDtoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['ticketBatch']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ticketBatch'])) {
                throw new Error("Expected the field `ticketBatch` to be an array in the JSON data but got " + data['ticketBatch']);
            }
            // validate the optional field `ticketBatch` (array)
            for (const item of data['ticketBatch']) {
                EventTicketDashboardResponseDtoInnerTicketBatchInner.validateJSON(item);
            };
        }

        return true;
    }


}

EventTicketDashboardResponseDtoInner.RequiredProperties = ["id", "title", "status", "price", "priceLiquid", "participantsCount", "ticketLimit", "ticketPercentualSell", "isBonus", "ticketBatch"];

/**
 * @member {String} id
 */
EventTicketDashboardResponseDtoInner.prototype['id'] = undefined;

/**
 * @member {String} title
 */
EventTicketDashboardResponseDtoInner.prototype['title'] = undefined;

/**
 * @member {module:model/EventTicketDashboardResponseDtoInner.StatusEnum} status
 */
EventTicketDashboardResponseDtoInner.prototype['status'] = undefined;

/**
 * @member {Number} price
 */
EventTicketDashboardResponseDtoInner.prototype['price'] = undefined;

/**
 * @member {Number} priceLiquid
 */
EventTicketDashboardResponseDtoInner.prototype['priceLiquid'] = undefined;

/**
 * @member {Number} participantsCount
 */
EventTicketDashboardResponseDtoInner.prototype['participantsCount'] = undefined;

/**
 * @member {Number} ticketLimit
 */
EventTicketDashboardResponseDtoInner.prototype['ticketLimit'] = undefined;

/**
 * @member {Number} ticketPercentualSell
 */
EventTicketDashboardResponseDtoInner.prototype['ticketPercentualSell'] = undefined;

/**
 * @member {Boolean} isBonus
 */
EventTicketDashboardResponseDtoInner.prototype['isBonus'] = undefined;

/**
 * @member {Array.<module:model/EventTicketDashboardResponseDtoInnerTicketBatchInner>} ticketBatch
 */
EventTicketDashboardResponseDtoInner.prototype['ticketBatch'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
EventTicketDashboardResponseDtoInner['StatusEnum'] = {

    /**
     * value: "ENABLE"
     * @const
     */
    "ENABLE": "ENABLE",

    /**
     * value: "DISABLE"
     * @const
     */
    "DISABLE": "DISABLE"
};



export default EventTicketDashboardResponseDtoInner;

