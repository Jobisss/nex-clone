/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FindAllPublicEventsDtoInner model module.
 * @module model/FindAllPublicEventsDtoInner
 * @version 1.0
 */
class FindAllPublicEventsDtoInner {
    /**
     * Constructs a new <code>FindAllPublicEventsDtoInner</code>.
     * @alias module:model/FindAllPublicEventsDtoInner
     * @param id {String} 
     * @param title {String} 
     * @param slug {String} 
     * @param photo {String} 
     * @param category {String} 
     * @param description {String} 
     * @param state {String} 
     * @param city {String} 
     * @param startAt {Object} 
     * @param endAt {Object} 
     */
    constructor(id, title, slug, photo, category, description, state, city, startAt, endAt) { 
        
        FindAllPublicEventsDtoInner.initialize(this, id, title, slug, photo, category, description, state, city, startAt, endAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, slug, photo, category, description, state, city, startAt, endAt) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['slug'] = slug;
        obj['photo'] = photo;
        obj['category'] = category;
        obj['description'] = description;
        obj['state'] = state;
        obj['city'] = city;
        obj['startAt'] = startAt;
        obj['endAt'] = endAt;
    }

    /**
     * Constructs a <code>FindAllPublicEventsDtoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindAllPublicEventsDtoInner} obj Optional instance to populate.
     * @return {module:model/FindAllPublicEventsDtoInner} The populated <code>FindAllPublicEventsDtoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindAllPublicEventsDtoInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], Object);
            }
            if (data.hasOwnProperty('endAt')) {
                obj['endAt'] = ApiClient.convertToType(data['endAt'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindAllPublicEventsDtoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindAllPublicEventsDtoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindAllPublicEventsDtoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['photo'] && !(typeof data['photo'] === 'string' || data['photo'] instanceof String)) {
            throw new Error("Expected the field `photo` to be a primitive type in the JSON string but got " + data['photo']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }

        return true;
    }


}

FindAllPublicEventsDtoInner.RequiredProperties = ["id", "title", "slug", "photo", "category", "description", "state", "city", "startAt", "endAt"];

/**
 * @member {String} id
 */
FindAllPublicEventsDtoInner.prototype['id'] = undefined;

/**
 * @member {String} title
 */
FindAllPublicEventsDtoInner.prototype['title'] = undefined;

/**
 * @member {String} slug
 */
FindAllPublicEventsDtoInner.prototype['slug'] = undefined;

/**
 * @member {String} photo
 */
FindAllPublicEventsDtoInner.prototype['photo'] = undefined;

/**
 * @member {String} category
 */
FindAllPublicEventsDtoInner.prototype['category'] = undefined;

/**
 * @member {String} description
 */
FindAllPublicEventsDtoInner.prototype['description'] = undefined;

/**
 * @member {String} state
 */
FindAllPublicEventsDtoInner.prototype['state'] = undefined;

/**
 * @member {String} city
 */
FindAllPublicEventsDtoInner.prototype['city'] = undefined;

/**
 * @member {Object} startAt
 */
FindAllPublicEventsDtoInner.prototype['startAt'] = undefined;

/**
 * @member {Object} endAt
 */
FindAllPublicEventsDtoInner.prototype['endAt'] = undefined;






export default FindAllPublicEventsDtoInner;

