/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParticipantTicketDto model module.
 * @module model/ParticipantTicketDto
 * @version 1.0
 */
class ParticipantTicketDto {
    /**
     * Constructs a new <code>ParticipantTicketDto</code>.
     * @alias module:model/ParticipantTicketDto
     * @param id {String} 
     * @param ticketName {String} 
     * @param price {Number} 
     * @param eventName {String} 
     * @param qrcode {String} 
     * @param startAt {Object} 
     */
    constructor(id, ticketName, price, eventName, qrcode, startAt) { 
        
        ParticipantTicketDto.initialize(this, id, ticketName, price, eventName, qrcode, startAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, ticketName, price, eventName, qrcode, startAt) { 
        obj['id'] = id;
        obj['ticketName'] = ticketName;
        obj['price'] = price;
        obj['eventName'] = eventName;
        obj['qrcode'] = qrcode;
        obj['startAt'] = startAt;
    }

    /**
     * Constructs a <code>ParticipantTicketDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParticipantTicketDto} obj Optional instance to populate.
     * @return {module:model/ParticipantTicketDto} The populated <code>ParticipantTicketDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParticipantTicketDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ticketName')) {
                obj['ticketName'] = ApiClient.convertToType(data['ticketName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = ApiClient.convertToType(data['eventName'], 'String');
            }
            if (data.hasOwnProperty('qrcode')) {
                obj['qrcode'] = ApiClient.convertToType(data['qrcode'], 'String');
            }
            if (data.hasOwnProperty('startAt')) {
                obj['startAt'] = ApiClient.convertToType(data['startAt'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParticipantTicketDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParticipantTicketDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParticipantTicketDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ticketName'] && !(typeof data['ticketName'] === 'string' || data['ticketName'] instanceof String)) {
            throw new Error("Expected the field `ticketName` to be a primitive type in the JSON string but got " + data['ticketName']);
        }
        // ensure the json data is a string
        if (data['eventName'] && !(typeof data['eventName'] === 'string' || data['eventName'] instanceof String)) {
            throw new Error("Expected the field `eventName` to be a primitive type in the JSON string but got " + data['eventName']);
        }
        // ensure the json data is a string
        if (data['qrcode'] && !(typeof data['qrcode'] === 'string' || data['qrcode'] instanceof String)) {
            throw new Error("Expected the field `qrcode` to be a primitive type in the JSON string but got " + data['qrcode']);
        }

        return true;
    }


}

ParticipantTicketDto.RequiredProperties = ["id", "ticketName", "price", "eventName", "qrcode", "startAt"];

/**
 * @member {String} id
 */
ParticipantTicketDto.prototype['id'] = undefined;

/**
 * @member {String} ticketName
 */
ParticipantTicketDto.prototype['ticketName'] = undefined;

/**
 * @member {Number} price
 */
ParticipantTicketDto.prototype['price'] = undefined;

/**
 * @member {String} eventName
 */
ParticipantTicketDto.prototype['eventName'] = undefined;

/**
 * @member {String} qrcode
 */
ParticipantTicketDto.prototype['qrcode'] = undefined;

/**
 * @member {Object} startAt
 */
ParticipantTicketDto.prototype['startAt'] = undefined;






export default ParticipantTicketDto;

