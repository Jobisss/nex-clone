/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginResponseDto from '../model/LoginResponseDto';
import UserProducerCreateDto from '../model/UserProducerCreateDto';
import UserProducerFinishSignUpDto from '../model/UserProducerFinishSignUpDto';
import UserProducerResponseDto from '../model/UserProducerResponseDto';

/**
* UserProducer service.
* @module api/UserProducerApi
* @version 1.0
*/
export default class UserProducerApi {

    /**
    * Constructs a new UserProducerApi. 
    * @alias module:api/UserProducerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userProducerControllerCreateUserProducer operation.
     * @callback module:api/UserProducerApi~userProducerControllerCreateUserProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register user producer
     * @param {module:model/UserProducerCreateDto} userProducerCreateDto 
     * @param {module:api/UserProducerApi~userProducerControllerCreateUserProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponseDto}
     */
    userProducerControllerCreateUserProducer(userProducerCreateDto, callback) {
      let postBody = userProducerCreateDto;
      // verify the required parameter 'userProducerCreateDto' is set
      if (userProducerCreateDto === undefined || userProducerCreateDto === null) {
        throw new Error("Missing the required parameter 'userProducerCreateDto' when calling userProducerControllerCreateUserProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponseDto;
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/sign-up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerFindOneUserProducer operation.
     * @callback module:api/UserProducerApi~userProducerControllerFindOneUserProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProducerResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user production
     * @param {module:api/UserProducerApi~userProducerControllerFindOneUserProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProducerResponseDto}
     */
    userProducerControllerFindOneUserProducer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProducerResponseDto;
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerFinishSignUp operation.
     * @callback module:api/UserProducerApi~userProducerControllerFinishSignUpCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finish register user producer
     * @param {module:model/UserProducerFinishSignUpDto} userProducerFinishSignUpDto 
     * @param {module:api/UserProducerApi~userProducerControllerFinishSignUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userProducerControllerFinishSignUp(userProducerFinishSignUpDto, callback) {
      let postBody = userProducerFinishSignUpDto;
      // verify the required parameter 'userProducerFinishSignUpDto' is set
      if (userProducerFinishSignUpDto === undefined || userProducerFinishSignUpDto === null) {
        throw new Error("Missing the required parameter 'userProducerFinishSignUpDto' when calling userProducerControllerFinishSignUp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/finish-register', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerUpdatePassword operation.
     * @callback module:api/UserProducerApi~userProducerControllerUpdatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} oldPassword 
     * @param {String} newPassword 
     * @param {module:api/UserProducerApi~userProducerControllerUpdatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userProducerControllerUpdatePassword(oldPassword, newPassword, callback) {
      let postBody = null;
      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling userProducerControllerUpdatePassword");
      }
      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling userProducerControllerUpdatePassword");
      }

      let pathParams = {
      };
      let queryParams = {
        'oldPassword': oldPassword,
        'newPassword': newPassword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/change-password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerUploadFacialPhoto operation.
     * @callback module:api/UserProducerApi~userProducerControllerUploadFacialPhotoCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a user facial photo
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/UserProducerApi~userProducerControllerUploadFacialPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userProducerControllerUploadFacialPhoto(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userProducerControllerUploadFacialPhoto");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/profile/upload-facial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerUploadProfilePhoto operation.
     * @callback module:api/UserProducerApi~userProducerControllerUploadProfilePhotoCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a user profile photo
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/UserProducerApi~userProducerControllerUploadProfilePhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userProducerControllerUploadProfilePhoto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/user-producer/v1/user-producer/profile/upload-photo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerUploadVideo operation.
     * @callback module:api/UserProducerApi~userProducerControllerUploadVideoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/UserProducerApi~userProducerControllerUploadVideoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userProducerControllerUploadVideo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user-producer/video', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProducerControllerUserHaveFacial operation.
     * @callback module:api/UserProducerApi~userProducerControllerUserHaveFacialCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User have facial
     * @param {module:api/UserProducerApi~userProducerControllerUserHaveFacialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    userProducerControllerUserHaveFacial(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/user-producer/v1/user/have-facial', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
