/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventAllResponseDtoInner from '../model/EventAllResponseDtoInner';
import EventCreateDto from '../model/EventCreateDto';
import EventDashboardPanelFinancialDto from '../model/EventDashboardPanelFinancialDto';
import EventDashboardResponseDto from '../model/EventDashboardResponseDto';
import EventPrintAllPartsDtoInner from '../model/EventPrintAllPartsDtoInner';
import EventProducerUpdateDto from '../model/EventProducerUpdateDto';
import FindOneDashboardParticipantPanelDto from '../model/FindOneDashboardParticipantPanelDto';
import GeneralDashboardResponseDto from '../model/GeneralDashboardResponseDto';
import GetEventsPrintAutomatic from '../model/GetEventsPrintAutomatic';
import ResponseEventParticipants from '../model/ResponseEventParticipants';

/**
* EventProducer service.
* @module api/EventProducerApi
* @version 1.0
*/
export default class EventProducerApi {

    /**
    * Constructs a new EventProducerApi. 
    * @alias module:api/EventProducerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventProducerControllerCreateEvent operation.
     * @callback module:api/EventProducerApi~eventProducerControllerCreateEventCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event
     * @param {module:model/EventCreateDto} eventCreateDto 
     * @param {module:api/EventProducerApi~eventProducerControllerCreateEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerControllerCreateEvent(eventCreateDto, callback) {
      let postBody = eventCreateDto;
      // verify the required parameter 'eventCreateDto' is set
      if (eventCreateDto === undefined || eventCreateDto === null) {
        throw new Error("Missing the required parameter 'eventCreateDto' when calling eventProducerControllerCreateEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/create-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerCreateEventPhoto operation.
     * @callback module:api/EventProducerApi~eventProducerControllerCreateEventPhotoCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a event photo
     * @param {String} eventId 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/EventProducerApi~eventProducerControllerCreateEventPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerControllerCreateEventPhoto(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventProducerControllerCreateEventPhoto");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventId}/upload-photo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerCreateEventTerms operation.
     * @callback module:api/EventProducerApi~eventProducerControllerCreateEventTermsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a event photo
     * @param {String} eventId 
     * @param {String} name 
     * @param {String} signature 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/EventProducerApi~eventProducerControllerCreateEventTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerControllerCreateEventTerms(eventId, name, signature, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventProducerControllerCreateEventTerms");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling eventProducerControllerCreateEventTerms");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling eventProducerControllerCreateEventTerms");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'name': name,
        'signature': signature
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventId}/create-terms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerFinancialDashboard operation.
     * @callback module:api/EventProducerApi~eventProducerControllerFinancialDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDashboardPanelFinancialDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get general dashboard
     * @param {String} eventSlug Event slug
     * @param {module:api/EventProducerApi~eventProducerControllerFinancialDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDashboardPanelFinancialDto}
     */
    eventProducerControllerFinancialDashboard(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerControllerFinancialDashboard");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventDashboardPanelFinancialDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/dashboard-financial', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerFindAllEvents operation.
     * @callback module:api/EventProducerApi~eventProducerControllerFindAllEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventAllResponseDtoInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all events
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {String} [perPage] 
     * @param {String} [searchable] 
     * @param {module:api/EventProducerApi~eventProducerControllerFindAllEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventAllResponseDtoInner>}
     */
    eventProducerControllerFindAllEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'searchable': opts['searchable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventAllResponseDtoInner];
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/events/find-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerFindAllParticipants operation.
     * @callback module:api/EventProducerApi~eventProducerControllerFindAllParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEventParticipants} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get general dashboard
     * @param {String} slug Event slug
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {String} [name] 
     * @param {Array.<String>} [ticketTitle] 
     * @param {module:api/EventProducerApi~eventProducerControllerFindAllParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEventParticipants}
     */
    eventProducerControllerFindAllParticipants(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventProducerControllerFindAllParticipants");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'name': opts['name'],
        'ticketTitle': this.apiClient.buildCollectionParam(opts['ticketTitle'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseEventParticipants;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{slug}/participants/find-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerFindOneDashboard operation.
     * @callback module:api/EventProducerApi~eventProducerControllerFindOneDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDashboardResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event dashboard
     * @param {String} slug Event slug
     * @param {module:api/EventProducerApi~eventProducerControllerFindOneDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDashboardResponseDto}
     */
    eventProducerControllerFindOneDashboard(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventProducerControllerFindOneDashboard");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventDashboardResponseDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{slug}/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerFindOneDashboardParticipantPanel operation.
     * @callback module:api/EventProducerApi~eventProducerControllerFindOneDashboardParticipantPanelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindOneDashboardParticipantPanelDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event dashboard
     * @param {String} slug Event slug
     * @param {module:api/EventProducerApi~eventProducerControllerFindOneDashboardParticipantPanelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindOneDashboardParticipantPanelDto}
     */
    eventProducerControllerFindOneDashboardParticipantPanel(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventProducerControllerFindOneDashboardParticipantPanel");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindOneDashboardParticipantPanelDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{slug}/dashboard/participant-panel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerGeneralDashboard operation.
     * @callback module:api/EventProducerApi~eventProducerControllerGeneralDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralDashboardResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get general dashboard
     * @param {module:api/EventProducerApi~eventProducerControllerGeneralDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralDashboardResponseDto}
     */
    eventProducerControllerGeneralDashboard(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeneralDashboardResponseDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/general-dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerGetEventsPrintAutomatic operation.
     * @callback module:api/EventProducerApi~eventProducerControllerGetEventsPrintAutomaticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventsPrintAutomatic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {String} [perPage] 
     * @param {module:api/EventProducerApi~eventProducerControllerGetEventsPrintAutomaticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventsPrintAutomatic}
     */
    eventProducerControllerGetEventsPrintAutomatic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventsPrintAutomatic;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/get-events-print-automatic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerGetPartClient operation.
     * @callback module:api/EventProducerApi~eventProducerControllerGetPartClientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventPrintAllPartsDtoInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event dashboard
     * @param {String} eventId Event id
     * @param {module:api/EventProducerApi~eventProducerControllerGetPartClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventPrintAllPartsDtoInner>}
     */
    eventProducerControllerGetPartClient(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventProducerControllerGetPartClient");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventPrintAllPartsDtoInner];
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventId}/print-participant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerUpdateEvent operation.
     * @callback module:api/EventProducerApi~eventProducerControllerUpdateEventCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update event
     * @param {String} slug 
     * @param {module:model/EventProducerUpdateDto} eventProducerUpdateDto 
     * @param {module:api/EventProducerApi~eventProducerControllerUpdateEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerControllerUpdateEvent(slug, eventProducerUpdateDto, callback) {
      let postBody = eventProducerUpdateDto;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventProducerControllerUpdateEvent");
      }
      // verify the required parameter 'eventProducerUpdateDto' is set
      if (eventProducerUpdateDto === undefined || eventProducerUpdateDto === null) {
        throw new Error("Missing the required parameter 'eventProducerUpdateDto' when calling eventProducerControllerUpdateEvent");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{slug}/update-event', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerControllerUpdateIsPrint operation.
     * @callback module:api/EventProducerApi~eventProducerControllerUpdateIsPrintCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event dashboard
     * @param {String} eventId Event Id
     * @param {String} participantId Participant ID
     * @param {module:api/EventProducerApi~eventProducerControllerUpdateIsPrintCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventProducerControllerUpdateIsPrint(eventId, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventProducerControllerUpdateIsPrint");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventProducerControllerUpdateIsPrint");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'participantId': participantId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventId}/print-participant', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
