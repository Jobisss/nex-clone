/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventProducerCreateStaffDto from '../model/EventProducerCreateStaffDto';
import EventProducerRecommendedStaffs from '../model/EventProducerRecommendedStaffs';
import EventStaffsResponse from '../model/EventStaffsResponse';
import ResponseStaffEvents from '../model/ResponseStaffEvents';

/**
* EventProducerStaff service.
* @module api/EventProducerStaffApi
* @version 1.0
*/
export default class EventProducerStaffApi {

    /**
    * Constructs a new EventProducerStaffApi. 
    * @alias module:api/EventProducerStaffApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventProducerStaffControllerCreateStaff operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerCreateStaffCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event staff
     * @param {String} eventSlug 
     * @param {module:model/EventProducerCreateStaffDto} eventProducerCreateStaffDto 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerCreateStaffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerStaffControllerCreateStaff(eventSlug, eventProducerCreateStaffDto, callback) {
      let postBody = eventProducerCreateStaffDto;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerStaffControllerCreateStaff");
      }
      // verify the required parameter 'eventProducerCreateStaffDto' is set
      if (eventProducerCreateStaffDto === undefined || eventProducerCreateStaffDto === null) {
        throw new Error("Missing the required parameter 'eventProducerCreateStaffDto' when calling eventProducerStaffControllerCreateStaff");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/staff/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerDelete operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete event staff
     * @param {String} eventSlug 
     * @param {String} staffId 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerStaffControllerDelete(eventSlug, staffId, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerStaffControllerDelete");
      }
      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling eventProducerStaffControllerDelete");
      }

      let pathParams = {
        'eventSlug': eventSlug,
        'staffId': staffId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/staff/delete/{staffId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerListEventStaff operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerListEventStaffCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventStaffsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List event staff
     * @param {String} eventSlug 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {String} [staffEmail] 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerListEventStaffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventStaffsResponse}
     */
    eventProducerStaffControllerListEventStaff(eventSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerStaffControllerListEventStaff");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'staffEmail': opts['staffEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventStaffsResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/staff/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerRecommendStaffs operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerRecommendStaffsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventProducerRecommendedStaffs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List event staff
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {String} [staffName] 
     * @param {String} [staffEmail] 
     * @param {String} [eventTitle] 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerRecommendStaffsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventProducerRecommendedStaffs}
     */
    eventProducerStaffControllerRecommendStaffs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'staffName': opts['staffName'],
        'staffEmail': opts['staffEmail'],
        'eventTitle': opts['eventTitle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventProducerRecommendedStaffs;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/recommend-staffs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerResendInviteEmail operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerResendInviteEmailCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend invite email to staff
     * @param {String} staffId 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerResendInviteEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerStaffControllerResendInviteEmail(staffId, callback) {
      let postBody = null;
      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling eventProducerStaffControllerResendInviteEmail");
      }

      let pathParams = {
        'staffId': staffId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/staff/resend-invite-email/{staffId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerStaffEvents operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerStaffEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStaffEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve events that the user is staff
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {String} [searchable] 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerStaffEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStaffEvents}
     */
    eventProducerStaffControllerStaffEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage'],
        'searchable': opts['searchable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseStaffEvents;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/staff/get-events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerStaffControllerUpdateEventStaff operation.
     * @callback module:api/EventProducerStaffApi~eventProducerStaffControllerUpdateEventStaffCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update event staff
     * @param {String} eventSlug 
     * @param {Object} opts Optional parameters
     * @param {String} [acceptedInvite] 
     * @param {module:api/EventProducerStaffApi~eventProducerStaffControllerUpdateEventStaffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerStaffControllerUpdateEventStaff(eventSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerStaffControllerUpdateEventStaff");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'acceptedInvite': opts['acceptedInvite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/staff/invite', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
