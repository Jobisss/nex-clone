/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventNetworksProducerCreateDtoInner from '../model/EventNetworksProducerCreateDtoInner';
import EventNetworksResponse from '../model/EventNetworksResponse';

/**
* EventProducerNetworks service.
* @module api/EventProducerNetworksApi
* @version 1.0
*/
export default class EventProducerNetworksApi {

    /**
    * Constructs a new EventProducerNetworksApi. 
    * @alias module:api/EventProducerNetworksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventNetworkProducerControllerCreateEventNetworks operation.
     * @callback module:api/EventProducerNetworksApi~eventNetworkProducerControllerCreateEventNetworksCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event networks
     * @param {String} eventSlug 
     * @param {Array.<module:model/EventNetworksProducerCreateDtoInner>} eventNetworksProducerCreateDtoInner 
     * @param {module:api/EventProducerNetworksApi~eventNetworkProducerControllerCreateEventNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventNetworkProducerControllerCreateEventNetworks(eventSlug, eventNetworksProducerCreateDtoInner, callback) {
      let postBody = eventNetworksProducerCreateDtoInner;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventNetworkProducerControllerCreateEventNetworks");
      }
      // verify the required parameter 'eventNetworksProducerCreateDtoInner' is set
      if (eventNetworksProducerCreateDtoInner === undefined || eventNetworksProducerCreateDtoInner === null) {
        throw new Error("Missing the required parameter 'eventNetworksProducerCreateDtoInner' when calling eventNetworkProducerControllerCreateEventNetworks");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/create-networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventNetworkProducerControllerFindAllEventNetworks operation.
     * @callback module:api/EventProducerNetworksApi~eventNetworkProducerControllerFindAllEventNetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNetworksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event networks
     * @param {String} eventSlug 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {module:api/EventProducerNetworksApi~eventNetworkProducerControllerFindAllEventNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNetworksResponse}
     */
    eventNetworkProducerControllerFindAllEventNetworks(eventSlug, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventNetworkProducerControllerFindAllEventNetworks");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventNetworkProducerControllerFindAllEventNetworks");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventNetworkProducerControllerFindAllEventNetworks");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventNetworksResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/get-networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
