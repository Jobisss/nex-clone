/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthLoginDto from '../model/AuthLoginDto';
import LoginResponseDto from '../model/LoginResponseDto';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authControllerFile operation.
     * @callback module:api/AuthApi~authControllerFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find an file especific
     * @param {String} key File source
     * @param {module:api/AuthApi~authControllerFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    authControllerFile(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling authControllerFile");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/jpeg'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/auth/v1/storage/file/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authControllerLogin operation.
     * @callback module:api/AuthApi~authControllerLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {module:model/AuthLoginDto} authLoginDto 
     * @param {module:api/AuthApi~authControllerLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponseDto}
     */
    authControllerLogin(authLoginDto, callback) {
      let postBody = authLoginDto;
      // verify the required parameter 'authLoginDto' is set
      if (authLoginDto === undefined || authLoginDto === null) {
        throw new Error("Missing the required parameter 'authLoginDto' when calling authControllerLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponseDto;
      return this.apiClient.callApi(
        '/api/auth/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authControllerLoginWithFacial operation.
     * @callback module:api/AuthApi~authControllerLoginWithFacialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login user with facial
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/AuthApi~authControllerLoginWithFacialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponseDto}
     */
    authControllerLoginWithFacial(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling authControllerLoginWithFacial");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoginResponseDto;
      return this.apiClient.callApi(
        '/api/auth/v1/auth/login-with-facial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authControllerMoloniTest operation.
     * @callback module:api/AuthApi~authControllerMoloniTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authControllerMoloniTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authControllerMoloniTest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth/moloni-test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authControllerTest operation.
     * @callback module:api/AuthApi~authControllerTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authControllerTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authControllerTest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth/webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authControllerValidateWithFacial operation.
     * @callback module:api/AuthApi~authControllerValidateWithFacialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate user with facial
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/AuthApi~authControllerValidateWithFacialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authControllerValidateWithFacial(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth/v1/auth/validate-facial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
