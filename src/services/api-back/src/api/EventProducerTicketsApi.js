/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventTicketCouponDashboardDto from '../model/EventTicketCouponDashboardDto';
import EventTicketCouponsDto from '../model/EventTicketCouponsDto';
import EventTicketCouponsResponse from '../model/EventTicketCouponsResponse';
import EventTicketCreateDto from '../model/EventTicketCreateDto';
import EventTicketLinkByEmailResponse from '../model/EventTicketLinkByEmailResponse';
import EventTicketLinkCreateResponseDto from '../model/EventTicketLinkCreateResponseDto';
import EventTicketLinkResponse from '../model/EventTicketLinkResponse';
import EventTicketUpdateDto from '../model/EventTicketUpdateDto';
import EventTicketsResponse from '../model/EventTicketsResponse';

/**
* EventProducerTickets service.
* @module api/EventProducerTicketsApi
* @version 1.0
*/
export default class EventProducerTicketsApi {

    /**
    * Constructs a new EventProducerTicketsApi. 
    * @alias module:api/EventProducerTicketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventTicketProducerControllerCreateEventTicket operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerCreateEventTicketCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event ticket
     * @param {String} eventSlug 
     * @param {module:model/EventTicketCreateDto} eventTicketCreateDto 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerCreateEventTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventTicketProducerControllerCreateEventTicket(eventSlug, eventTicketCreateDto, callback) {
      let postBody = eventTicketCreateDto;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerCreateEventTicket");
      }
      // verify the required parameter 'eventTicketCreateDto' is set
      if (eventTicketCreateDto === undefined || eventTicketCreateDto === null) {
        throw new Error("Missing the required parameter 'eventTicketCreateDto' when calling eventTicketProducerControllerCreateEventTicket");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/create-ticket', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerCreateEventTicketCoupons operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerCreateEventTicketCouponsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event ticket cupom
     * @param {String} eventSlug 
     * @param {module:model/EventTicketCouponsDto} eventTicketCouponsDto 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerCreateEventTicketCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventTicketProducerControllerCreateEventTicketCoupons(eventSlug, eventTicketCouponsDto, callback) {
      let postBody = eventTicketCouponsDto;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerCreateEventTicketCoupons");
      }
      // verify the required parameter 'eventTicketCouponsDto' is set
      if (eventTicketCouponsDto === undefined || eventTicketCouponsDto === null) {
        throw new Error("Missing the required parameter 'eventTicketCouponsDto' when calling eventTicketProducerControllerCreateEventTicketCoupons");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/create-cupom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerCreatePrivateTicketLink operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerCreatePrivateTicketLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketLinkCreateResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create invite link by private ticket
     * @param {String} eventSlug 
     * @param {String} ticketBatchId 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerCreatePrivateTicketLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketLinkCreateResponseDto}
     */
    eventTicketProducerControllerCreatePrivateTicketLink(eventSlug, ticketBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerCreatePrivateTicketLink");
      }
      // verify the required parameter 'ticketBatchId' is set
      if (ticketBatchId === undefined || ticketBatchId === null) {
        throw new Error("Missing the required parameter 'ticketBatchId' when calling eventTicketProducerControllerCreatePrivateTicketLink");
      }

      let pathParams = {
        'eventSlug': eventSlug,
        'ticketBatchId': ticketBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketLinkCreateResponseDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/create-private-link/{ticketBatchId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerCuponsDashboard operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerCuponsDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketCouponDashboardDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event cupons dash
     * @param {String} eventSlug 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerCuponsDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketCouponDashboardDto}
     */
    eventTicketProducerControllerCuponsDashboard(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerCuponsDashboard");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketCouponDashboardDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/dashboard-cupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerFindAllEventTicket operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerFindAllEventTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event tickets
     * @param {String} eventSlug 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {Boolean} [isPrivate] 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerFindAllEventTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketsResponse}
     */
    eventTicketProducerControllerFindAllEventTicket(eventSlug, page, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerFindAllEventTicket");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventTicketProducerControllerFindAllEventTicket");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventTicketProducerControllerFindAllEventTicket");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'page': page,
        'perPage': perPage,
        'title': opts['title'],
        'isPrivate': opts['isPrivate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketsResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/get-tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerFindAllEventTicketCoupons operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerFindAllEventTicketCouponsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketCouponsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event cupons
     * @param {String} eventSlug 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerFindAllEventTicketCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketCouponsResponse}
     */
    eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug, page, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerFindAllEventTicketCoupons");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventTicketProducerControllerFindAllEventTicketCoupons");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventTicketProducerControllerFindAllEventTicketCoupons");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'page': page,
        'perPage': perPage,
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketCouponsResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/get-cupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerGetAllLinksWithOneTicket operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerGetAllLinksWithOneTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all links with one ticket
     * @param {String} eventSlug 
     * @param {String} ticketId 
     * @param {String} ticketPriceId 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerGetAllLinksWithOneTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketLinkResponse}
     */
    eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug, ticketId, ticketPriceId, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerGetAllLinksWithOneTicket");
      }
      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling eventTicketProducerControllerGetAllLinksWithOneTicket");
      }
      // verify the required parameter 'ticketPriceId' is set
      if (ticketPriceId === undefined || ticketPriceId === null) {
        throw new Error("Missing the required parameter 'ticketPriceId' when calling eventTicketProducerControllerGetAllLinksWithOneTicket");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventTicketProducerControllerGetAllLinksWithOneTicket");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventTicketProducerControllerGetAllLinksWithOneTicket");
      }

      let pathParams = {
        'eventSlug': eventSlug,
        'ticketId': ticketId,
        'ticketPriceId': ticketPriceId
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketLinkResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/tickets/{ticketId}/{ticketPriceId}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerSendInviteLinkByEmail operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerSendInviteLinkByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketLinkByEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send invite link participant by email
     * @param {String} eventSlug 
     * @param {String} ticketBatchId 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerSendInviteLinkByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketLinkByEmailResponse}
     */
    eventTicketProducerControllerSendInviteLinkByEmail(eventSlug, ticketBatchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerSendInviteLinkByEmail");
      }
      // verify the required parameter 'ticketBatchId' is set
      if (ticketBatchId === undefined || ticketBatchId === null) {
        throw new Error("Missing the required parameter 'ticketBatchId' when calling eventTicketProducerControllerSendInviteLinkByEmail");
      }

      let pathParams = {
        'eventSlug': eventSlug,
        'ticketBatchId': ticketBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EventTicketLinkByEmailResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/send-invite-link-by-email/{ticketBatchId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTicketProducerControllerUpdateEventTicket operation.
     * @callback module:api/EventProducerTicketsApi~eventTicketProducerControllerUpdateEventTicketCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update event ticket
     * @param {String} eventSlug 
     * @param {String} eventTicketId 
     * @param {module:model/EventTicketUpdateDto} eventTicketUpdateDto 
     * @param {module:api/EventProducerTicketsApi~eventTicketProducerControllerUpdateEventTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventTicketProducerControllerUpdateEventTicket(eventSlug, eventTicketId, eventTicketUpdateDto, callback) {
      let postBody = eventTicketUpdateDto;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventTicketProducerControllerUpdateEventTicket");
      }
      // verify the required parameter 'eventTicketId' is set
      if (eventTicketId === undefined || eventTicketId === null) {
        throw new Error("Missing the required parameter 'eventTicketId' when calling eventTicketProducerControllerUpdateEventTicket");
      }
      // verify the required parameter 'eventTicketUpdateDto' is set
      if (eventTicketUpdateDto === undefined || eventTicketUpdateDto === null) {
        throw new Error("Missing the required parameter 'eventTicketUpdateDto' when calling eventTicketProducerControllerUpdateEventTicket");
      }

      let pathParams = {
        'eventSlug': eventSlug,
        'eventTicketId': eventTicketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/update-ticket/{eventTicketId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
