/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSponsorUserDto from '../model/CreateSponsorUserDto';
import ResponseSponsorUserDto from '../model/ResponseSponsorUserDto';
import UpdateSponsorUserDto from '../model/UpdateSponsorUserDto';

/**
* SponsorUser service.
* @module api/SponsorUserApi
* @version 1.0
*/
export default class SponsorUserApi {

    /**
    * Constructs a new SponsorUserApi. 
    * @alias module:api/SponsorUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sponsorUserControllerCreateSponsorUser operation.
     * @callback module:api/SponsorUserApi~sponsorUserControllerCreateSponsorUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSponsorUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sponsor User
     * @param {module:model/CreateSponsorUserDto} createSponsorUserDto 
     * @param {module:api/SponsorUserApi~sponsorUserControllerCreateSponsorUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSponsorUserDto}
     */
    sponsorUserControllerCreateSponsorUser(createSponsorUserDto, callback) {
      let postBody = createSponsorUserDto;
      // verify the required parameter 'createSponsorUserDto' is set
      if (createSponsorUserDto === undefined || createSponsorUserDto === null) {
        throw new Error("Missing the required parameter 'createSponsorUserDto' when calling sponsorUserControllerCreateSponsorUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSponsorUserDto;
      return this.apiClient.callApi(
        '/api/sponsor-user/v1/sponsor-user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sponsorUserControllerGetSponserUser operation.
     * @callback module:api/SponsorUserApi~sponsorUserControllerGetSponserUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSponsorUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sponsor User
     * @param {module:api/SponsorUserApi~sponsorUserControllerGetSponserUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSponsorUserDto}
     */
    sponsorUserControllerGetSponserUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseSponsorUserDto;
      return this.apiClient.callApi(
        '/api/sponsor-user/v1/sponsor-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sponsorUserControllerUpdate operation.
     * @callback module:api/SponsorUserApi~sponsorUserControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSponsorUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sponsor User
     * @param {module:model/UpdateSponsorUserDto} updateSponsorUserDto 
     * @param {module:api/SponsorUserApi~sponsorUserControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSponsorUserDto}
     */
    sponsorUserControllerUpdate(updateSponsorUserDto, callback) {
      let postBody = updateSponsorUserDto;
      // verify the required parameter 'updateSponsorUserDto' is set
      if (updateSponsorUserDto === undefined || updateSponsorUserDto === null) {
        throw new Error("Missing the required parameter 'updateSponsorUserDto' when calling sponsorUserControllerUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSponsorUserDto;
      return this.apiClient.callApi(
        '/api/sponsor-user/v1/sponsor-user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
