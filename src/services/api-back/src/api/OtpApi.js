/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginResponseDto from '../model/LoginResponseDto';

/**
* Otp service.
* @module api/OtpApi
* @version 1.0
*/
export default class OtpApi {

    /**
    * Constructs a new OtpApi. 
    * @alias module:api/OtpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the otpControllerChangePassword operation.
     * @callback module:api/OtpApi~otpControllerChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate otp code
     * @param {String} hash 
     * @param {String} number 
     * @param {String} password 
     * @param {module:api/OtpApi~otpControllerChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponseDto}
     */
    otpControllerChangePassword(hash, number, password, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling otpControllerChangePassword");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling otpControllerChangePassword");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling otpControllerChangePassword");
      }

      let pathParams = {
      };
      let queryParams = {
        'hash': hash,
        'number': number,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginResponseDto;
      return this.apiClient.callApi(
        '/api/otp/v1/otp/change-password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the otpControllerForgotPassword operation.
     * @callback module:api/OtpApi~otpControllerForgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password
     * @param {String} email 
     * @param {module:api/OtpApi~otpControllerForgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    otpControllerForgotPassword(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling otpControllerForgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/otp/v1/otp/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the otpControllerValidateOtp operation.
     * @callback module:api/OtpApi~otpControllerValidateOtpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate otp code
     * @param {String} hash 
     * @param {String} number 
     * @param {module:api/OtpApi~otpControllerValidateOtpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    otpControllerValidateOtp(hash, number, callback) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling otpControllerValidateOtp");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling otpControllerValidateOtp");
      }

      let pathParams = {
      };
      let queryParams = {
        'hash': hash,
        'number': number
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/otp/v1/otp/validate-code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the otpControllerVerifyEmail operation.
     * @callback module:api/OtpApi~otpControllerVerifyEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password
     * @param {String} email 
     * @param {module:api/OtpApi~otpControllerVerifyEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    otpControllerVerifyEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling otpControllerVerifyEmail");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/otp/v1/otp/verify-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the otpControllerVerifyEmailCode operation.
     * @callback module:api/OtpApi~otpControllerVerifyEmailCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password
     * @param {String} email 
     * @param {String} code 
     * @param {module:api/OtpApi~otpControllerVerifyEmailCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    otpControllerVerifyEmailCode(email, code, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling otpControllerVerifyEmailCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling otpControllerVerifyEmailCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/otp/v1/otp/verify-email-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
