/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateParticipantQuizDto from '../model/CreateParticipantQuizDto';
import EventParticipantCreateDto from '../model/EventParticipantCreateDto';
import EventParticipantCreateDtoNetworksInner from '../model/EventParticipantCreateDtoNetworksInner';
import EventTicketInfoDto from '../model/EventTicketInfoDto';
import EventTicketSellDto from '../model/EventTicketSellDto';
import FindAllPublicEvents from '../model/FindAllPublicEvents';
import FindAllPublicEventsDtoInner from '../model/FindAllPublicEventsDtoInner';
import FindByEmailDto from '../model/FindByEmailDto';
import FindEventInfoDto from '../model/FindEventInfoDto';
import FindOnePublicEventsDto from '../model/FindOnePublicEventsDto';
import FindTicketByLinkResponseDto from '../model/FindTicketByLinkResponseDto';
import ListTickets from '../model/ListTickets';
import ParticipantSocialNetworks from '../model/ParticipantSocialNetworks';
import ParticipantTicketDto from '../model/ParticipantTicketDto';
import QuizCreateResponseDto from '../model/QuizCreateResponseDto';
import QuizDto from '../model/QuizDto';
import ThanksScreenDto from '../model/ThanksScreenDto';
import UserIsParticipantInEventByLinkIdResponseDto from '../model/UserIsParticipantInEventByLinkIdResponseDto';

/**
* EventParticipant service.
* @module api/EventParticipantApi
* @version 1.0
*/
export default class EventParticipantApi {

    /**
    * Constructs a new EventParticipantApi. 
    * @alias module:api/EventParticipantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventParticipantControllerCheckTicketIsAvaible operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCheckTicketIsAvaibleCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one event public
     * @param {String} slug Event slug
     * @param {String} linkId Link id
     * @param {module:api/EventParticipantApi~eventParticipantControllerCheckTicketIsAvaibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    eventParticipantControllerCheckTicketIsAvaible(slug, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventParticipantControllerCheckTicketIsAvaible");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling eventParticipantControllerCheckTicketIsAvaible");
      }

      let pathParams = {
        'slug': slug,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{slug}/{linkId}/verify-is-avaible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerCreateNetwork operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCreateNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} qrcode 
     * @param {module:api/EventParticipantApi~eventParticipantControllerCreateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventParticipantControllerCreateNetwork(qrcode, callback) {
      let postBody = null;
      // verify the required parameter 'qrcode' is set
      if (qrcode === undefined || qrcode === null) {
        throw new Error("Missing the required parameter 'qrcode' when calling eventParticipantControllerCreateNetwork");
      }

      let pathParams = {
      };
      let queryParams = {
        'qrcode': qrcode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/create-network', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerCreateParticipant operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCreateParticipantCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event
     * @param {String} userEmail 
     * @param {Boolean} updateUser 
     * @param {String} eventTicketLinkId 
     * @param {module:model/EventParticipantCreateDto} eventParticipantCreateDto 
     * @param {module:api/EventParticipantApi~eventParticipantControllerCreateParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventParticipantControllerCreateParticipant(userEmail, updateUser, eventTicketLinkId, eventParticipantCreateDto, callback) {
      let postBody = eventParticipantCreateDto;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling eventParticipantControllerCreateParticipant");
      }
      // verify the required parameter 'updateUser' is set
      if (updateUser === undefined || updateUser === null) {
        throw new Error("Missing the required parameter 'updateUser' when calling eventParticipantControllerCreateParticipant");
      }
      // verify the required parameter 'eventTicketLinkId' is set
      if (eventTicketLinkId === undefined || eventTicketLinkId === null) {
        throw new Error("Missing the required parameter 'eventTicketLinkId' when calling eventParticipantControllerCreateParticipant");
      }
      // verify the required parameter 'eventParticipantCreateDto' is set
      if (eventParticipantCreateDto === undefined || eventParticipantCreateDto === null) {
        throw new Error("Missing the required parameter 'eventParticipantCreateDto' when calling eventParticipantControllerCreateParticipant");
      }

      let pathParams = {
        'eventTicketLinkId': eventTicketLinkId
      };
      let queryParams = {
        'userEmail': userEmail,
        'updateUser': updateUser
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{eventTicketLinkId}/create-participant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerCreateParticipantFacial operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCreateParticipantFacialCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event participant facial
     * @param {String} participantId 
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/EventParticipantApi~eventParticipantControllerCreateParticipantFacialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventParticipantControllerCreateParticipantFacial(participantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventParticipantControllerCreateParticipantFacial");
      }

      let pathParams = {
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{participantId}/create-participant-facial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerCreateParticipantNetworks operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCreateParticipantNetworksCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event participant network
     * @param {String} participantId 
     * @param {Array.<module:model/EventParticipantCreateDtoNetworksInner>} eventParticipantCreateDtoNetworksInner 
     * @param {module:api/EventParticipantApi~eventParticipantControllerCreateParticipantNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventParticipantControllerCreateParticipantNetworks(participantId, eventParticipantCreateDtoNetworksInner, callback) {
      let postBody = eventParticipantCreateDtoNetworksInner;
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventParticipantControllerCreateParticipantNetworks");
      }
      // verify the required parameter 'eventParticipantCreateDtoNetworksInner' is set
      if (eventParticipantCreateDtoNetworksInner === undefined || eventParticipantCreateDtoNetworksInner === null) {
        throw new Error("Missing the required parameter 'eventParticipantCreateDtoNetworksInner' when calling eventParticipantControllerCreateParticipantNetworks");
      }

      let pathParams = {
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{participantId}/create-participant-network', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerCreateQuizResponses operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerCreateQuizResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuizCreateResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz
     * @param {String} quizId 
     * @param {String} userEmail 
     * @param {module:model/CreateParticipantQuizDto} createParticipantQuizDto 
     * @param {module:api/EventParticipantApi~eventParticipantControllerCreateQuizResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuizCreateResponseDto}
     */
    eventParticipantControllerCreateQuizResponses(quizId, userEmail, createParticipantQuizDto, callback) {
      let postBody = createParticipantQuizDto;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventParticipantControllerCreateQuizResponses");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling eventParticipantControllerCreateQuizResponses");
      }
      // verify the required parameter 'createParticipantQuizDto' is set
      if (createParticipantQuizDto === undefined || createParticipantQuizDto === null) {
        throw new Error("Missing the required parameter 'createParticipantQuizDto' when calling eventParticipantControllerCreateQuizResponses");
      }

      let pathParams = {
        'quizId': quizId
      };
      let queryParams = {
        'userEmail': userEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuizCreateResponseDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{quizId}/response-quiz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerEventAddViewCount operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerEventAddViewCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * increment view count
     * @param {String} eventSlug 
     * @param {module:api/EventParticipantApi~eventParticipantControllerEventAddViewCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventParticipantControllerEventAddViewCount(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventParticipantControllerEventAddViewCount");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{eventSlug}/increment-view-count', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerEventTicketInfo operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerEventTicketInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTicketInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event information
     * @param {String} eventSlug 
     * @param {module:api/EventParticipantApi~eventParticipantControllerEventTicketInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTicketInfoDto}
     */
    eventParticipantControllerEventTicketInfo(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventParticipantControllerEventTicketInfo");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTicketInfoDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{eventSlug}/event-ticket-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerEventTicketSell operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerEventTicketSellCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Boolean} updateUser 
     * @param {module:model/EventTicketSellDto} eventTicketSellDto 
     * @param {module:api/EventParticipantApi~eventParticipantControllerEventTicketSellCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventParticipantControllerEventTicketSell(updateUser, eventTicketSellDto, callback) {
      let postBody = eventTicketSellDto;
      // verify the required parameter 'updateUser' is set
      if (updateUser === undefined || updateUser === null) {
        throw new Error("Missing the required parameter 'updateUser' when calling eventParticipantControllerEventTicketSell");
      }
      // verify the required parameter 'eventTicketSellDto' is set
      if (eventTicketSellDto === undefined || eventTicketSellDto === null) {
        throw new Error("Missing the required parameter 'eventTicketSellDto' when calling eventParticipantControllerEventTicketSell");
      }

      let pathParams = {
      };
      let queryParams = {
        'updateUser': updateUser
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/event-ticket-buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerFindAllPublicEvents operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerFindAllPublicEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindAllPublicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all events public
     * @param {String} page 
     * @param {String} perPage 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {String} [category] 
     * @param {String} [initialDate] 
     * @param {String} [finalDate] 
     * @param {module:api/EventParticipantApi~eventParticipantControllerFindAllPublicEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindAllPublicEvents}
     */
    eventParticipantControllerFindAllPublicEvents(page, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventParticipantControllerFindAllPublicEvents");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventParticipantControllerFindAllPublicEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'perPage': perPage,
        'title': opts['title'],
        'category': opts['category'],
        'initialDate': opts['initialDate'],
        'finalDate': opts['finalDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindAllPublicEvents;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/find-all-events-public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerFindAllPublicEventsHome operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerFindAllPublicEventsHomeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindAllPublicEventsDtoInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Events More View
     * @param {module:api/EventParticipantApi~eventParticipantControllerFindAllPublicEventsHomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindAllPublicEventsDtoInner>}
     */
    eventParticipantControllerFindAllPublicEventsHome(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindAllPublicEventsDtoInner];
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/get-events-home', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerFindByEmail operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerFindByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindByEmailDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event information
     * @param {String} email 
     * @param {module:api/EventParticipantApi~eventParticipantControllerFindByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindByEmailDto}
     */
    eventParticipantControllerFindByEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling eventParticipantControllerFindByEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindByEmailDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{email}/find-user-by-email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerFindEventInfo operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerFindEventInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindEventInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event information
     * @param {String} eventTicketLinkId 
     * @param {module:api/EventParticipantApi~eventParticipantControllerFindEventInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindEventInfoDto}
     */
    eventParticipantControllerFindEventInfo(eventTicketLinkId, callback) {
      let postBody = null;
      // verify the required parameter 'eventTicketLinkId' is set
      if (eventTicketLinkId === undefined || eventTicketLinkId === null) {
        throw new Error("Missing the required parameter 'eventTicketLinkId' when calling eventParticipantControllerFindEventInfo");
      }

      let pathParams = {
        'eventTicketLinkId': eventTicketLinkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindEventInfoDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{eventTicketLinkId}/event-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerFindOnePublicEvent operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerFindOnePublicEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindOnePublicEventsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one event public
     * @param {String} slug Event slug
     * @param {module:api/EventParticipantApi~eventParticipantControllerFindOnePublicEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindOnePublicEventsDto}
     */
    eventParticipantControllerFindOnePublicEvent(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventParticipantControllerFindOnePublicEvent");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindOnePublicEventsDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{slug}/find-one-event-public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerGetAllParticipantNetworks operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerGetAllParticipantNetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantSocialNetworks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get social networks of event participant
     * @param {module:api/EventParticipantApi~eventParticipantControllerGetAllParticipantNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantSocialNetworks}
     */
    eventParticipantControllerGetAllParticipantNetworks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParticipantSocialNetworks;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/get-social-networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerGetEventsMoreView operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerGetEventsMoreViewCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindAllPublicEventsDtoInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Events More View
     * @param {module:api/EventParticipantApi~eventParticipantControllerGetEventsMoreViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindAllPublicEventsDtoInner>}
     */
    eventParticipantControllerGetEventsMoreView(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindAllPublicEventsDtoInner];
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/get-events-more-views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerGetQuiz operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerGetQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuizDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz
     * @param {String} quizId 
     * @param {module:api/EventParticipantApi~eventParticipantControllerGetQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuizDto}
     */
    eventParticipantControllerGetQuiz(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventParticipantControllerGetQuiz");
      }

      let pathParams = {
        'quizId': quizId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuizDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{quizId}/get-quiz', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerGetTicketInfoByLink operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerGetTicketInfoByLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindTicketByLinkResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one event public
     * @param {String} eventTicketLinkId 
     * @param {module:api/EventParticipantApi~eventParticipantControllerGetTicketInfoByLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindTicketByLinkResponseDto}
     */
    eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId, callback) {
      let postBody = null;
      // verify the required parameter 'eventTicketLinkId' is set
      if (eventTicketLinkId === undefined || eventTicketLinkId === null) {
        throw new Error("Missing the required parameter 'eventTicketLinkId' when calling eventParticipantControllerGetTicketInfoByLink");
      }

      let pathParams = {
        'eventTicketLinkId': eventTicketLinkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindTicketByLinkResponseDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{eventTicketLinkId}/get-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerListTickets operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerListTicketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTickets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event information
     * @param {String} page 
     * @param {String} perPage 
     * @param {Object} opts Optional parameters
     * @param {String} [searchable] 
     * @param {String} [initialDate] 
     * @param {String} [finalDate] 
     * @param {module:api/EventParticipantApi~eventParticipantControllerListTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTickets}
     */
    eventParticipantControllerListTickets(page, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventParticipantControllerListTickets");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventParticipantControllerListTickets");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'perPage': perPage,
        'searchable': opts['searchable'],
        'initialDate': opts['initialDate'],
        'finalDate': opts['finalDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTickets;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/list-tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerNetworkHistoric operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerNetworkHistoricCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} page 
     * @param {String} perPage 
     * @param {module:api/EventParticipantApi~eventParticipantControllerNetworkHistoricCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventParticipantControllerNetworkHistoric(page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventParticipantControllerNetworkHistoric");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventParticipantControllerNetworkHistoric");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/network-historic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerNetworkParticipant operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerNetworkParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} qrcode 
     * @param {module:api/EventParticipantApi~eventParticipantControllerNetworkParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventParticipantControllerNetworkParticipant(qrcode, callback) {
      let postBody = null;
      // verify the required parameter 'qrcode' is set
      if (qrcode === undefined || qrcode === null) {
        throw new Error("Missing the required parameter 'qrcode' when calling eventParticipantControllerNetworkParticipant");
      }

      let pathParams = {
        'qrcode': qrcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/network/{qrcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerParticipantTicket operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerParticipantTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantTicketDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event participant ticket
     * @param {String} participantId 
     * @param {module:api/EventParticipantApi~eventParticipantControllerParticipantTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantTicketDto}
     */
    eventParticipantControllerParticipantTicket(participantId, callback) {
      let postBody = null;
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventParticipantControllerParticipantTicket");
      }

      let pathParams = {
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParticipantTicketDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{participantId}/ticket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerThanksScreen operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerThanksScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThanksScreenDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one event public
     * @param {String} partId Participant ID
     * @param {module:api/EventParticipantApi~eventParticipantControllerThanksScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThanksScreenDto}
     */
    eventParticipantControllerThanksScreen(partId, callback) {
      let postBody = null;
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling eventParticipantControllerThanksScreen");
      }

      let pathParams = {
        'partId': partId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThanksScreenDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{partId}/thanks-screen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerUserIsParticipantInEventByLinkId operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerUserIsParticipantInEventByLinkIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserIsParticipantInEventByLinkIdResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz
     * @param {String} linkId 
     * @param {String} userEmail 
     * @param {module:api/EventParticipantApi~eventParticipantControllerUserIsParticipantInEventByLinkIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserIsParticipantInEventByLinkIdResponseDto}
     */
    eventParticipantControllerUserIsParticipantInEventByLinkId(linkId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling eventParticipantControllerUserIsParticipantInEventByLinkId");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling eventParticipantControllerUserIsParticipantInEventByLinkId");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
        'userEmail': userEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserIsParticipantInEventByLinkIdResponseDto;
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{linkId}/is-participant-by-link-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventParticipantControllerUserIsParticipantInEventByQuizId operation.
     * @callback module:api/EventParticipantApi~eventParticipantControllerUserIsParticipantInEventByQuizIdCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz
     * @param {String} quizId 
     * @param {String} userEmail 
     * @param {module:api/EventParticipantApi~eventParticipantControllerUserIsParticipantInEventByQuizIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    eventParticipantControllerUserIsParticipantInEventByQuizId(quizId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventParticipantControllerUserIsParticipantInEventByQuizId");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling eventParticipantControllerUserIsParticipantInEventByQuizId");
      }

      let pathParams = {
        'quizId': quizId
      };
      let queryParams = {
        'userEmail': userEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/event-participant/v1/event-participant/{quizId}/is-participant-by-quiz-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
