/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FindByFacialResponseDto from '../model/FindByFacialResponseDto';
import GetEventConfigDto from '../model/GetEventConfigDto';
import LastAccreditedParticipantsResponse from '../model/LastAccreditedParticipantsResponse';

/**
* EventProducerCredential service.
* @module api/EventProducerCredentialApi
* @version 1.0
*/
export default class EventProducerCredentialApi {

    /**
    * Constructs a new EventProducerCredentialApi. 
    * @alias module:api/EventProducerCredentialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerAccreditParticipant operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerAccreditParticipantCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accredit a participant
     * @param {String} eventSlug Event slug
     * @param {String} participantId Event Participant ID
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerAccreditParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerAccreditationControllerAccreditParticipant(eventSlug, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerAccreditParticipant");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventProducerAccreditationControllerAccreditParticipant");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'participantId': participantId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/accredit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerCheckOutInAllParticipants operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerCheckOutInAllParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event accreditation qrcode
     * @param {String} eventSlug Event slug
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerCheckOutInAllParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerCheckOutInAllParticipants");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/check-out-all-participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerFindByFacial operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerFindByFacialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindByFacialResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event accreditation qrcode
     * @param {String} eventSlug Event slug
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerFindByFacialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindByFacialResponseDto}
     */
    eventProducerAccreditationControllerFindByFacial(eventSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerFindByFacial");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FindByFacialResponseDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/facial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerFindByQrCode operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerFindByQrCodeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event accreditation qrcode
     * @param {String} eventSlug Event slug
     * @param {String} qrcode Event accreditation qrcode
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerFindByQrCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventProducerAccreditationControllerFindByQrCode(eventSlug, qrcode, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerFindByQrCode");
      }
      // verify the required parameter 'qrcode' is set
      if (qrcode === undefined || qrcode === null) {
        throw new Error("Missing the required parameter 'qrcode' when calling eventProducerAccreditationControllerFindByQrCode");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'qrcode': qrcode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/qrcode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerGetEventConfig operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerGetEventConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventConfigDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event config
     * @param {String} eventSlug Event slug
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerGetEventConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventConfigDto}
     */
    eventProducerAccreditationControllerGetEventConfig(eventSlug, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerGetEventConfig");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventConfigDto;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/event-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerLastAccreditedParticipants operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerLastAccreditedParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastAccreditedParticipantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get accreditation historic
     * @param {String} eventSlug Event slug
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {String} [perPage] 
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerLastAccreditedParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastAccreditedParticipantsResponse}
     */
    eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerLastAccreditedParticipants");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'page': opts['page'],
        'perPage': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LastAccreditedParticipantsResponse;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/historic-participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventProducerAccreditationControllerRePrintParticipant operation.
     * @callback module:api/EventProducerCredentialApi~eventProducerAccreditationControllerRePrintParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event config
     * @param {String} eventSlug Event slug
     * @param {String} participantId Event participant id
     * @param {module:api/EventProducerCredentialApi~eventProducerAccreditationControllerRePrintParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventProducerAccreditationControllerRePrintParticipant(eventSlug, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'eventSlug' is set
      if (eventSlug === undefined || eventSlug === null) {
        throw new Error("Missing the required parameter 'eventSlug' when calling eventProducerAccreditationControllerRePrintParticipant");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling eventProducerAccreditationControllerRePrintParticipant");
      }

      let pathParams = {
        'eventSlug': eventSlug
      };
      let queryParams = {
        'participantId': participantId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/event-producer/v1/event-producer/{eventSlug}/accreditation/re-printer', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
