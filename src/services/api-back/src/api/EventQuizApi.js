/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventParticipantResponseDto from '../model/EventParticipantResponseDto';
import EventQuizCreateDto from '../model/EventQuizCreateDto';
import EventQuizCreatedResponseDto from '../model/EventQuizCreatedResponseDto';
import EventQuizDashboarDto from '../model/EventQuizDashboarDto';
import EventQuizFindAllResponse from '../model/EventQuizFindAllResponse';
import EventQuizParticipantsResponse from '../model/EventQuizParticipantsResponse';

/**
* EventQuiz service.
* @module api/EventQuizApi
* @version 1.0
*/
export default class EventQuizApi {

    /**
    * Constructs a new EventQuizApi. 
    * @alias module:api/EventQuizApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventQuizControllerAlterQuizStatus operation.
     * @callback module:api/EventQuizApi~eventQuizControllerAlterQuizStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alter quiz status
     * @param {String} slug 
     * @param {String} quizId 
     * @param {module:api/EventQuizApi~eventQuizControllerAlterQuizStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventQuizControllerAlterQuizStatus(slug, quizId, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerAlterQuizStatus");
      }
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventQuizControllerAlterQuizStatus");
      }

      let pathParams = {
        'slug': slug,
        'quizId': quizId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/quiz/{quizId}/alter-status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerCreateQuiz operation.
     * @callback module:api/EventQuizApi~eventQuizControllerCreateQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventQuizCreatedResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event quiz
     * @param {String} slug 
     * @param {module:model/EventQuizCreateDto} eventQuizCreateDto 
     * @param {module:api/EventQuizApi~eventQuizControllerCreateQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventQuizCreatedResponseDto}
     */
    eventQuizControllerCreateQuiz(slug, eventQuizCreateDto, callback) {
      let postBody = eventQuizCreateDto;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerCreateQuiz");
      }
      // verify the required parameter 'eventQuizCreateDto' is set
      if (eventQuizCreateDto === undefined || eventQuizCreateDto === null) {
        throw new Error("Missing the required parameter 'eventQuizCreateDto' when calling eventQuizControllerCreateQuiz");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventQuizCreatedResponseDto;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/create-quiz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerCreateQuizQuestions operation.
     * @callback module:api/EventQuizApi~eventQuizControllerCreateQuizQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventQuizCreatedResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new quiz questions
     * @param {String} slug 
     * @param {String} quizId 
     * @param {Array.<Object>} requestBody 
     * @param {module:api/EventQuizApi~eventQuizControllerCreateQuizQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventQuizCreatedResponseDto}
     */
    eventQuizControllerCreateQuizQuestions(slug, quizId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerCreateQuizQuestions");
      }
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventQuizControllerCreateQuizQuestions");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling eventQuizControllerCreateQuizQuestions");
      }

      let pathParams = {
        'slug': slug,
        'quizId': quizId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventQuizCreatedResponseDto;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/quiz/{quizId}/create-questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerFindAllQuizzes operation.
     * @callback module:api/EventQuizApi~eventQuizControllerFindAllQuizzesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventQuizFindAllResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all quizzes for an event
     * @param {String} slug 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {module:api/EventQuizApi~eventQuizControllerFindAllQuizzesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventQuizFindAllResponse}
     */
    eventQuizControllerFindAllQuizzes(slug, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerFindAllQuizzes");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventQuizControllerFindAllQuizzes");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventQuizControllerFindAllQuizzes");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventQuizFindAllResponse;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/find-all-quizzes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerQuizDashboard operation.
     * @callback module:api/EventQuizApi~eventQuizControllerQuizDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventQuizDashboarDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz dashboard details
     * @param {String} slug 
     * @param {String} quizId 
     * @param {module:api/EventQuizApi~eventQuizControllerQuizDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventQuizDashboarDto}
     */
    eventQuizControllerQuizDashboard(slug, quizId, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerQuizDashboard");
      }
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventQuizControllerQuizDashboard");
      }

      let pathParams = {
        'slug': slug,
        'quizId': quizId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventQuizDashboarDto;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/quiz-dashboard/{quizId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerQuizParticipantResponse operation.
     * @callback module:api/EventQuizApi~eventQuizControllerQuizParticipantResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventParticipantResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz participants responses
     * @param {String} slug 
     * @param {String} quizId 
     * @param {String} quizParticipantId 
     * @param {module:api/EventQuizApi~eventQuizControllerQuizParticipantResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventParticipantResponseDto}
     */
    eventQuizControllerQuizParticipantResponse(slug, quizId, quizParticipantId, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerQuizParticipantResponse");
      }
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventQuizControllerQuizParticipantResponse");
      }
      // verify the required parameter 'quizParticipantId' is set
      if (quizParticipantId === undefined || quizParticipantId === null) {
        throw new Error("Missing the required parameter 'quizParticipantId' when calling eventQuizControllerQuizParticipantResponse");
      }

      let pathParams = {
        'slug': slug,
        'quizId': quizId,
        'quizParticipantId': quizParticipantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventParticipantResponseDto;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/quiz-participants/{quizId}/{quizParticipantId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventQuizControllerQuizParticipantsResponse operation.
     * @callback module:api/EventQuizApi~eventQuizControllerQuizParticipantsResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventQuizParticipantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quiz participants responses
     * @param {String} slug 
     * @param {String} quizId 
     * @param {Number} page 
     * @param {Number} perPage 
     * @param {module:api/EventQuizApi~eventQuizControllerQuizParticipantsResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventQuizParticipantsResponse}
     */
    eventQuizControllerQuizParticipantsResponse(slug, quizId, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventQuizControllerQuizParticipantsResponse");
      }
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling eventQuizControllerQuizParticipantsResponse");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling eventQuizControllerQuizParticipantsResponse");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling eventQuizControllerQuizParticipantsResponse");
      }

      let pathParams = {
        'slug': slug,
        'quizId': quizId
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventQuizParticipantsResponse;
      return this.apiClient.callApi(
        '/api/event-quiz/v1/event-quiz/{slug}/quiz-participants/{quizId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
