/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NexEventApi);
  }
}(this, function(expect, NexEventApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NexEventApi.AuthApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthApi', function() {
    describe('authControllerFile', function() {
      it('should call authControllerFile successfully', function(done) {
        //uncomment below and update the code to test authControllerFile
        //instance.authControllerFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authControllerLogin', function() {
      it('should call authControllerLogin successfully', function(done) {
        //uncomment below and update the code to test authControllerLogin
        //instance.authControllerLogin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authControllerLoginWithFacial', function() {
      it('should call authControllerLoginWithFacial successfully', function(done) {
        //uncomment below and update the code to test authControllerLoginWithFacial
        //instance.authControllerLoginWithFacial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authControllerMoloniTest', function() {
      it('should call authControllerMoloniTest successfully', function(done) {
        //uncomment below and update the code to test authControllerMoloniTest
        //instance.authControllerMoloniTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authControllerTest', function() {
      it('should call authControllerTest successfully', function(done) {
        //uncomment below and update the code to test authControllerTest
        //instance.authControllerTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authControllerValidateWithFacial', function() {
      it('should call authControllerValidateWithFacial successfully', function(done) {
        //uncomment below and update the code to test authControllerValidateWithFacial
        //instance.authControllerValidateWithFacial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
