/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NexEventApi);
  }
}(this, function(expect, NexEventApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NexEventApi.EventTicketInfoDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EventTicketInfoDto', function() {
    it('should create an instance of EventTicketInfoDto', function() {
      // uncomment below and update the code to test EventTicketInfoDto
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be.a(NexEventApi.EventTicketInfoDto);
    });

    it('should have the property eventPhoto (base name: "eventPhoto")', function() {
      // uncomment below and update the code to test the property eventPhoto
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventTitle (base name: "eventTitle")', function() {
      // uncomment below and update the code to test the property eventTitle
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventDescription (base name: "eventDescription")', function() {
      // uncomment below and update the code to test the property eventDescription
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventState (base name: "eventState")', function() {
      // uncomment below and update the code to test the property eventState
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventCity (base name: "eventCity")', function() {
      // uncomment below and update the code to test the property eventCity
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventAddress (base name: "eventAddress")', function() {
      // uncomment below and update the code to test the property eventAddress
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventNumber (base name: "eventNumber")', function() {
      // uncomment below and update the code to test the property eventNumber
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventDistrict (base name: "eventDistrict")', function() {
      // uncomment below and update the code to test the property eventDistrict
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventComplement (base name: "eventComplement")', function() {
      // uncomment below and update the code to test the property eventComplement
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventLatitude (base name: "eventLatitude")', function() {
      // uncomment below and update the code to test the property eventLatitude
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventLongitude (base name: "eventLongitude")', function() {
      // uncomment below and update the code to test the property eventLongitude
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventStartAt (base name: "eventStartAt")', function() {
      // uncomment below and update the code to test the property eventStartAt
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property eventEndAt (base name: "eventEndAt")', function() {
      // uncomment below and update the code to test the property eventEndAt
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property tickets (base name: "tickets")', function() {
      // uncomment below and update the code to test the property tickets
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property guests (base name: "guests")', function() {
      // uncomment below and update the code to test the property guests
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new NexEventApi.EventTicketInfoDto();
      //expect(instance).to.be();
    });

  });

}));
